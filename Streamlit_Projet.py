# -*- coding: utf-8 -*-

# cd Potiron\"DATA ANALYST"\STREAMLIT
# streamlit run Streamlit_Projet.py

import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from pathlib import Path

# D√©finir le r√©pertoire de base (r√©pertoire du script courant)
BASE_DIR = Path(__file__).resolve().parent

# Charger les fichiers CSV
def load_csv(filename, sep=',', encoding='utf-8', header=0):
    return pd.read_csv(BASE_DIR / filename, sep=sep, encoding=encoding, header=header)

try:
    css_path = BASE_DIR / "styles.css"
    with css_path.open(encoding="utf-8") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
except FileNotFoundError:
    st.error("Le fichier CSS 'styles.css' est introuvable.")
except Exception as e:
    st.error(f"Une erreur s'est produite lors du chargement du fichier CSS : {e}")

st.sidebar.title("Sommaire")

pages = ["Projet", "Jeux de donn√©es sources", "Pertinence des donn√©es", "Pr√©paration des donn√©es",
         "Dataset final & DataVizualization", "Mod√©lisation", "Pr√©dictions", "Limites", "Conclusions"]

page = st.sidebar.radio("", pages)

# Ajouter des commentaires en dessous du sommaire
st.sidebar.write("---")  # Ligne de s√©paration facultative
st.sidebar.write("Cohorte avril 2024 / DA")
st.sidebar.write("Sujet : Temp√©ratures Terrestres")
st.sidebar.write("Eric Potiron")

# PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if page == pages[0]: # PAGE 0 *** Projet ***
    st.write("### <u>Contexte</u>", unsafe_allow_html=True)

    # Texte justifi√© pour la page Contexte
    st.markdown(
        """
        <p class="justified-text">
        Il y a 20 000 ans, la Terre √©tait en pleine p√©riode glaciaire, appel√©e le Dernier Maximum Glaciaire. Une grande partie de l'h√©misph√®re nord √©tait recouverte d'√©paisses calottes glaciaires, notamment en Am√©rique du Nord, en Europe et en Asie. Les glaciers atteignaient parfois plusieurs kilom√®tres d'√©paisseur, transformant les paysages et modifiant les √©cosyst√®mes. Le niveau des oc√©ans √©tait plus bas d'environ 120 m√®tres, car une grande quantit√© d'eau √©tait pi√©g√©e sous forme de glace. En cons√©quence, des ponts terrestres reliaient des terres aujourd'hui s√©par√©es par des mers, facilitant la migration des esp√®ces, y compris les humains. Les r√©gions proches de l'√©quateur restaient relativement plus chaudes et humides, servant de refuges pour la biodiversit√©. La v√©g√©tation dans les zones temp√©r√©es et froides √©tait domin√©e par la toundra et la steppe, avec tr√®s peu de for√™ts‚Ä¶
        </p>
        <p class="justified-text">
        Un r√©chauffement climatique de +5¬∞C nous s√©pare de cette p√©riode. Qui a dur√© 20.000 ans.
        </p>
        """,
        unsafe_allow_html=True
    )

    st.write("### <u>Objectif</u>", unsafe_allow_html=True)

    # Texte justifi√© pour l'objectif du projet
    st.markdown(
        """
        <p class="justified-text">
        L'objectif de ce projet est de d√©montrer comment l'apprentissage des techniques de data analyse peut √™tre appliqu√© pour √©tudier et comprendre les dynamiques du r√©chauffement climatique. En utilisant des jeux de donn√©es historiques sur les variations de temp√©rature, les √©missions de gaz √† effet de serre, et des indicateurs √©conomiques et d√©mographiques, ce projet vise √† :
            <br>
            <ul class="justified-text">
                <li>Explorer et visualiser les tendances mondiales li√©es au r√©chauffement climatique et √† l'industrialisation.</li>
                <li>√âvaluer les corr√©lations entre diff√©rents facteurs, tels que le PIB, la croissance d√©mographique et les √©missions de CO‚ÇÇ, pour identifier les relations cl√©s influen√ßant le climat.</li>
                <li>Utiliser des mod√®les de r√©gression et d'autres techniques analytiques pour pr√©dire les variations futures des temp√©ratures mondiales en fonction des donn√©es actuelles et des sc√©narios projet√©s.</li>
                <li>Mettre en avant les limites et les d√©fis de l'analyse de donn√©es environnementales, en insistant sur l'importance de la contextualisation des r√©sultats et des mod√®les dans le cadre d'une compr√©hension plus large des ph√©nom√®nes climatiques.</li>
            </ul>
            Ce projet cherche √† illustrer l'application concr√®te des comp√©tences en data analyse pour contribuer √† une meilleure compr√©hension des probl√©matiques environnementales, tout en servant de base de r√©flexion pour d√©velopper des strat√©gies d'adaptation face au changement climatique.
        </p>
        <p class="justified-text">
        Les 3 principaux gaz √† effet de serre sont le dioxyde de carbone (CO¬≤), le m√©thane (CH4) et le protoxyde d‚Äôazote (N¬≤O). Le CO¬≤ est responsable de 65% de l‚Äôeffet de serre anthropique, c‚Äôest-√†-dire d√ª aux activit√©s humaines.
        </p>
        <p class="justified-text">
        C‚Äôest sur ce dernier point que ce projet portera.
        </p>
        """,
        unsafe_allow_html=True
    )


# PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[1]: # PAGE 1 *** Jeux de donn√©es sources ***
    st.write("### Jeux de donn√©es sources")

    # Chemin relatif pour chaque fichier CSV
    csv_files = {
        "Zonal annual means.csv": BASE_DIR / 'Zonal annual means.csv',
        "Southern Hemisphere-mean monthly, seasonal, and annual means.csv": BASE_DIR / 'Southern Hemisphere-mean monthly, seasonal, and annual means.csv',
        "Northern Hemisphere-mean monthly, seasonal, and annual means.csv": BASE_DIR / 'Northern Hemisphere-mean monthly, seasonal, and annual means.csv',
        "Global-mean monthly, seasonal, and annual means.csv": BASE_DIR / 'Global-mean monthly, seasonal, and annual means.csv',
        "global-gdp-over-the-long-run.csv": BASE_DIR / 'global-gdp-over-the-long-run.csv',
        "owid-co2-data.csv": BASE_DIR / 'owid-co2-data.csv'
    }

    # Exemple d'affichage dynamique pour chaque fichier CSV
    for csv_name, csv_path in csv_files.items():
        if st.checkbox(f"### üìÅ **{csv_name}**"):
            header = 0 if 'gdp' in csv_name or 'co2' in csv_name else 1
            df = load_csv(csv_path, header=header)

            rows, cols = df.shape
            num_duplicates = df.duplicated().sum()
            manquantes = df.isna().sum().to_frame().T
            info = pd.DataFrame({
                'Column': df.columns,
                'Non-Null Count': [df[col].notnull().sum() for col in df.columns],
                'Dtype': [df[col].dtype for col in df.columns]
            })
            info = info.T
            info.columns = info.iloc[0]
            info = info[1:]

            st.write(f"**Le dataframe contient** {rows} lignes et {cols} colonnes.")
            st.write(f"Le nombre de **doublons** est de : {num_duplicates}")
            st.write(f"**Valeurs manquantes :**")
            st.dataframe(manquantes)
            st.write(f"**Informations :**")
            st.dataframe(info)
            st.write(f"**En t√™te :**")  
            st.write(df.head())

            if 'Zonal' in csv_name:
                st.write("Source : NASA")
                st.write("Acc√®s libre : [NASA Data](https://data.giss.nasa.gov/gistemp/)")
                st.markdown(
                    """
                    <p class="justified-text">
                    Le fichier contient des donn√©es annuelles moyennes de variations de temp√©rature pour diff√©rentes r√©gions du globe, de 1880 √† une date r√©cente. La NASA collecte ces donn√©es via divers moyens tels que des stations m√©t√©orologiques, des bou√©es oc√©aniques, et des satellites.
                    </p>
                    """, 
                    unsafe_allow_html=True
                )
            elif 'gdp' in csv_name:
                st.write("Source : OCDE")
                st.write("Acc√®s libre : [Our World in Data](https://ourworldindata.org/)")
                st.markdown(
                    """
                    <p class="justified-text">
                    Ce fichier donne une vision de l‚Äô√©volution du PIB mondial depuis l‚Äôan 1 jusqu‚Äô√† 2022, ajust√© en fonction de l'inflation.
                    </p>
                    """, 
                    unsafe_allow_html=True
                )


# PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[2]: # PAGE 2 *** Pertinence des donn√©es ***
    st.write("## Pertinence des donn√©es")

    st.markdown(
        """
        <div class="justified-text">
            Cette section explore la pertinence des diff√©rentes donn√©es en mettant en lumi√®re les variations de temp√©rature, les √©volutions du PIB, les √©missions de CO2, et d'autres indicateurs environnementaux. Les graphiques ci-dessous illustrent ces relations et leur impact sur le climat global.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Disposition des boutons "Tout afficher" et "Tout masquer"
    col1, col2 = st.columns([1, 1])
    with col1:
        show_all = st.button("Tout afficher")
    with col2:
        hide_all = st.button("Tout masquer")

    # Gestion de l'affichage des sections
    if show_all:
        display_sections = True
    elif hide_all:
        display_sections = False
    else:
        display_sections = None

    # Chemins relatifs pour les fichiers CSV
    csv_paths = {
        "Zonal annual means": BASE_DIR / 'Zonal annual means.csv',
        "Global GDP": BASE_DIR / 'global-gdp-over-the-long-run.csv',
        "OWID CO2 data": BASE_DIR / 'owid-co2-data.csv'
    }

    # 1. Variations mondiales des temp√©ratures globales par ann√©e
    if show_all or st.checkbox("Variations mondiales des temp√©ratures globales par ann√©e"):
        df_temp = pd.read_csv(csv_paths["Zonal annual means"], header=0)
        plt.figure(figsize=(10, 5))
        plt.plot(df_temp['Year'], df_temp['Glob'], color='blue', marker='.', linestyle='-')
        plt.title('Variations mondiales des temp√©ratures globales par ann√©e')
        plt.xlabel('Ann√©e')
        plt.ylabel('Temp√©rature Globale (¬∞C)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                L'analyse de la courbe montre une augmentation graduelle des temp√©ratures globales, soulignant le r√©chauffement climatique progressif depuis le d√©but du 20√®me si√®cle. Cette tendance est particuli√®rement marqu√©e √† partir des ann√©es 1960.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 2. Variations des temp√©ratures pour les h√©misph√®res Nord et Sud
    if show_all or st.checkbox("Variations mondiales des temp√©ratures pour les h√©misph√®res Nord et Sud"):
        plt.figure(figsize=(10, 5))
        plt.plot(df_temp['Year'], df_temp['NHem'], color='green', marker='.', linestyle='-', label='H√©misph√®re Nord')
        plt.plot(df_temp['Year'], df_temp['SHem'], color='orange', marker='.', linestyle='-', label='H√©misph√®re Sud')
        plt.title('Variations mondiales des temp√©ratures pour les h√©misph√®res Nord et Sud')
        plt.xlabel('Ann√©e')
        plt.ylabel('Temp√©rature (¬∞C)')
        plt.legend()
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                La courbe indique des diff√©rences dans les tendances de r√©chauffement entre les deux h√©misph√®res, l'h√©misph√®re Nord affichant une hausse plus prononc√©e que le Sud, probablement en raison de la concentration des activit√©s humaines et industrielles.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 3. √âvolution du PIB mondial √† partir de 1850
    if show_all or st.checkbox("√âvolution du PIB mondial √† partir de 1850"):
        df_gdp = pd.read_csv(csv_paths["Global GDP"], header=0)
        df_gdp_filtered = df_gdp[df_gdp['Year'] >= 1850]
        df_gdp_filtered['GDP'] = df_gdp_filtered['GDP'].astype(float) / 1e9  # Conversion en milliards

        plt.figure(figsize=(10, 5))
        plt.plot(df_gdp_filtered['Year'], df_gdp_filtered['GDP'], color='purple', marker='.', linestyle='-')
        plt.title('√âvolution du PIB mondial √† partir de 1850 (en milliards de dollars)')
        plt.xlabel('Ann√©e')
        plt.ylabel('PIB mondial (Md)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                L'√©volution du PIB mondial met en √©vidence une croissance continue, particuli√®rement apr√®s la Seconde Guerre mondiale, avec l'essor industriel et l'expansion √©conomique globale.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 4. Total des √©missions de CO2 mondiales
    if show_all or st.checkbox("Total des √©missions de CO¬≤ mondiales"):
        df_co2 = pd.read_csv(csv_paths["OWID CO2 data"], header=0)
        df_co2_world = df_co2[df_co2['country'] == 'World']

        plt.figure(figsize=(10, 5))
        plt.plot(df_co2_world['year'], df_co2_world['co2_including_luc'], color='red', marker='.', linestyle='-')
        plt.title("√âmissions mondiales de CO¬≤ (y compris l'utilisation des terres)")
        plt.xlabel('Ann√©e')
        plt.ylabel('√âmissions de CO2 (Gt)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                Les √©missions de CO2 ont augment√© de fa√ßon marqu√©e depuis 1850, avec une acc√©l√©ration notable apr√®s 1950, co√Øncidant avec l'industrialisation et la croissance √©conomique mondiale.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 5. √âmissions mondiales de CO¬≤ par source (√† partir de 1900)
    if show_all or st.checkbox("√âmissions mondiales de CO¬≤ par source (√† partir de 1900)"):
        columns_of_interest = ['year', 'cement_co2', 'coal_co2', 'flaring_co2', 'gas_co2', 
                               'land_use_change_co2', 'oil_co2', 'other_industry_co2']
        rename_dict = {
            'year': 'Ann√©e',
            'cement_co2': 'CO2 Ciment',
            'coal_co2': 'CO2 Charbon',
            'flaring_co2': 'CO2 Torchage',
            'gas_co2': 'CO2 Gaz',
            'land_use_change_co2': 'CO2 Changement d\'utilisation des terres',
            'oil_co2': 'CO2 P√©trole',
            'other_industry_co2': 'CO2 Autres Industries'
        }
        df_co2_sources = df_co2_world[columns_of_interest].rename(columns=rename_dict)
        df_co2_sources = df_co2_sources[df_co2_sources['Ann√©e'] >= 1900]

        plt.figure(figsize=(12, 6))
        for column in list(rename_dict.values())[1:]:  # Exclure 'Ann√©e'
            plt.plot(df_co2_sources['Ann√©e'], df_co2_sources[column], marker='.', linestyle='-', label=column)

        plt.title('√âmissions mondiales de CO¬≤ par source (√† partir de 1900)')
        plt.xlabel('Ann√©e')
        plt.ylabel('√âmissions de CO¬≤ (Gt)')
        plt.legend()
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                Cette analyse montre la contribution de diff√©rentes sources d'√©missions de CO2 au fil du temps, avec une pr√©dominance des √©missions provenant du charbon, du p√©trole et des changements d'utilisation des terres.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 6. √âvolution de la population mondiale par ann√©e
    if show_all or st.checkbox("√âvolution de la population mondiale par ann√©e"):
        df_co2_world['population'] = df_co2_world['population'] / 1e9  # Conversion en milliards

        plt.figure(figsize=(10, 5))
        plt.plot(df_co2_world['year'], df_co2_world['population'], color='green', marker='.', linestyle='-')
        plt.title('√âvolution de la population mondiale par ann√©e')
        plt.xlabel('Ann√©e')
        plt.ylabel('Population mondiale (en milliards)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <div class="justified-text">
                La courbe montre une augmentation rapide de la population mondiale depuis le d√©but du 20√®me si√®cle, particuli√®rement marqu√©e apr√®s 1950, en raison des progr√®s en m√©decine et des politiques de sant√© publique.
            </div>
            """,
            unsafe_allow_html=True
        )

    # 7. Corr√©lation entre la population et les √©missions de CO2
    if show_all or st.checkbox("Corr√©lation entre population et √©missions de CO¬≤"):
        fig, ax1 = plt.subplots(figsize=(10, 5))
        ax1.plot(df_co2_world['year'], df_co2_world['population'], color='blue', label='Population mondiale (en milliards)', marker='.', linestyle='-')
        ax1.set_xlabel('Ann√©e')
        ax1.set_ylabel('Population mondiale (en milliards)', color='blue')
        ax1.tick_params(axis='y', labelcolor='blue')

        ax2 = ax1.twinx()
        ax2.plot(df_co2_world['year'], df_co2_world['co2_including_luc'], color='red', label='√âmissions de CO2 (Gt)', marker='.', linestyle='-')
        ax2.set_ylabel('√âmissions de CO2 (Gt)', color='red')
        ax2.tick_params(axis='y', labelcolor='red')

        plt.title('Corr√©lation entre la population mondiale et les √©missions de CO¬≤')
        fig.tight_layout()
        st.pyplot(fig)
        st.markdown(
            """
            <div class="justified-text">
                Cette visualisation met en lumi√®re la corr√©lation entre la croissance de la population et l'augmentation des √©missions de CO2. Cette relation est fortement influenc√©e par l'industrialisation et l'urbanisation accrues.
            </div>
            """,
            unsafe_allow_html=True
        )


# PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[3]: # PAGE 3 *** Pr√©paration des donn√©es ***
    st.write("## Pr√©paration des donn√©es")

    st.markdown(
        """
        <div class="justified-text">
            Afin de pr√©parer notre travail de mod√©lisation, trois fichiers sont retenus :
            <br><br>
            <ol>
                <li>
                    Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">Zonal annual means.csv</span>, dont seules les colonnes Year, Glob, NHem, SHem sont conserv√©es et renomm√©es respectivement en Ann√©e, Var. Temp., H√©m. Nord, et H√©m. Sud.
                </li>
                <li>
                    Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">global-gdp-over-the-long-run.csv</span>, dont seules les colonnes Year et GDP sont conserv√©es et renomm√©es en Ann√©e et PIB (Md). La colonne PIB est arrondie √† z√©ro chiffre apr√®s la virgule et exprim√©e en milliards (Md).
                </li>
                <li>
                    Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">owid-co2-data.csv</span>, scind√© en deux fichiers :
                    <ul>
                        <li>Un fichier contenant les donn√©es de la zone mondiale pour les d√©tails des √©missions de CO2 par source.</li>
                        <li>Un fichier contenant les donn√©es de la zone mondiale pour les colonnes Population et Total CO2.</li>
                    </ul>
                </li>
            </ol>
            Les graphiques ci-dessous comparent les variations de temp√©rature observ√©es aux donn√©es projet√©es.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Chargement des fichiers CSV
    csv_paths = {
        "owid_co2": BASE_DIR / 'owid-co2-data.csv',
        "zonal_annual_means": BASE_DIR / 'Zonal annual means.csv'
    }
    
    df_co2 = load_csv(csv_paths["owid_co2"], header=0)
    df_zonal = load_csv(csv_paths["zonal_annual_means"], header=0)

    # Filtrer pour ne garder que les donn√©es o√π 'country' est "World"
    df_co2 = df_co2[df_co2['country'] == 'World']

    # Renommer la colonne 'year' en 'Year' dans df_co2
    df_co2 = df_co2.rename(columns={'year': 'Year'})

    # Extraction des colonnes n√©cessaires
    df_co2 = df_co2[['Year', 'temperature_change_from_co2']]
    df_zonal = df_zonal[['Year', 'Glob']]

    # Filtrer les ann√©es de 1850 √† 2023 dans chaque DataFrame
    df_co2 = df_co2[(df_co2['Year'] >= 1850) & (df_co2['Year'] <= 2023)]
    df_zonal = df_zonal[(df_zonal['Year'] >= 1850) & (df_zonal['Year'] <= 2023)]

    # Fusion des deux DataFrames sur la colonne 'Year'
    df_merged = pd.merge(df_co2, df_zonal, on='Year')

    # Ajout de la colonne pour la diff√©rence entre 'temperature_change_from_co2' et 'Glob'
    df_merged['difference'] = df_merged['temperature_change_from_co2'] - df_merged['Glob']

    # Trac√© du graphique
    plt.figure(figsize=(12, 6))
    plt.plot(df_merged['Year'], df_merged['temperature_change_from_co2'], label='owid-co2-data.csv')
    plt.plot(df_merged['Year'], df_merged['Glob'], label='Zonal annual means.csv')

    # Ajouter les labels et le titre
    plt.xlabel('Ann√©e')
    plt.ylabel('Variation de temp√©rature')
    plt.title('Variation de temp√©rature due au CO2 et autres facteurs (1900-2023)')
    plt.legend()

    # Afficher le graphique
    st.pyplot(plt)

   
# PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[4]: # PAGE 4 *** Dataset final & DataVizualization ***
    st.write("## Dataset final & DataVizualization")

    st.markdown(
        """
        <div class="justified-text">
            Apr√®s la fusion des diff√©rents jeux de donn√©es sur l'ann√©e et l'ajout des donn√©es pour l'ann√©e 2023, le dataset final se pr√©sente comme suit :
        </div>
        """,
        unsafe_allow_html=True
    )

    # Charger le fichier CSV du dataset final
    csv_path = BASE_DIR / 'final_df.csv'
    final_df = load_csv(csv_path, header=0)

    # Cr√©ation des options de visualisation pour le dataset
    option = st.selectbox(
        "Choisissez l'option d'affichage des donn√©es :",
        ("Aucune s√©lection", "En-t√™te du data", "Fin du data", "Informations", "Valeurs manquantes", "Doublons")
    )

    # Affichage conditionnel selon l'option choisie
    if option == "Aucune s√©lection":
        st.write("Veuillez choisir une option pour afficher le dataset.")

    elif option == "En-t√™te du data":
        styled_df = final_df.head().style.format({
            final_df.columns[0]: "{:.0f}",
            final_df.columns[1]: "{:.2f}",
            final_df.columns[2]: "{:.2f}",
            final_df.columns[3]: "{:.2f}",
            final_df.columns[4]: "{:.0f}",
            final_df.columns[5]: "{:.0f}",
            final_df.columns[6]: "{:.0f}",
        })
        st.dataframe(styled_df)

    elif option == "Fin du data":
        styled_df = final_df.tail().style.format({
            final_df.columns[0]: "{:.0f}",
            final_df.columns[1]: "{:.2f}",
            final_df.columns[2]: "{:.2f}",
            final_df.columns[3]: "{:.2f}",
            final_df.columns[4]: "{:.0f}",
            final_df.columns[5]: "{:.0f}",
            final_df.columns[6]: "{:.0f}",
        })
        st.dataframe(styled_df)

    elif option == "Informations":
        st.write("### Informations sur le dataset")
        df_info = pd.DataFrame({
            "Type de donn√©es": final_df.dtypes,
            "Nombre de non nuls": final_df.count(),
            "Pourcentage de non nuls (%)": ((final_df.count() / len(final_df)) * 100).round(2),
            "Nombre de valeurs uniques": final_df.nunique()
        })
        st.table(df_info)
        rows, cols = final_df.shape
        st.write(f"Le dataset contient **{rows} lignes** et **{cols} colonnes**.")

    elif option == "Valeurs manquantes":
        st.write("### Valeurs manquantes")
        missing_values = final_df.isna().sum().to_frame().T
        st.dataframe(missing_values)

    elif option == "Doublons":
        num_duplicates = final_df.duplicated().sum()
        st.write(f"Le nombre de doublons est de : **{num_duplicates}**")

    # Ajout d'observations sur les donn√©es
    st.markdown(
        """
        <span style="color: blue; font-weight: bold; text-decoration: underline;">Observations</span>
        <div class="justified-text">
            Le graphique suivant montre l'absence de saisonnalit√© √©vidente et la corr√©lation apparente entre la population, le PIB, et les √©missions de CO2, en particulier apr√®s 1980. 
            Depuis 1900, la population mondiale et les √©missions de CO2 semblent suivre des trajectoires parall√®les, tandis que le PIB montre une relation plus √©troite avec les √©missions √† partir des ann√©es 1980.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Filtrer les donn√©es pour les ann√©es >= 1900
    filtered_final_df = final_df[final_df['Ann√©e'] >= 1900]

    # Cr√©ation d'un graphique combin√© pour les variables pertinentes
    fig, ax = plt.subplots(figsize=(12, 6))

    # Trac√© des courbes des diff√©rentes variables
    ax.plot(filtered_final_df['Ann√©e'], filtered_final_df['Var. Temp.'], label='Variation Temp√©rature Globale', color='green', linestyle='-', marker='.')
    ax.plot(filtered_final_df['Ann√©e'], filtered_final_df['PIB (Md)'], label='PIB (Md)', color='blue', linestyle='-', marker='.')
    ax.plot(filtered_final_df['Ann√©e'], filtered_final_df['Population (m)'], label='Population (m)', color='purple', linestyle='--', marker='.')
    ax.plot(filtered_final_df['Ann√©e'], filtered_final_df['Total CO2 (mT)'], label='Total CO2 (mT)', color='red', linestyle='-.', marker='.')

    # Configurer les axes et le titre
    ax.set_title("√âvolution des Donn√©es Globales depuis 1900")
    ax.set_xlabel("Ann√©e")
    ax.set_ylabel("Valeurs (log)")
    ax.set_yscale('log')  # √âchelle logarithmique pour une meilleure visualisation
    ax.grid(True)
    ax.legend(loc='best')

    st.pyplot(plt)

    # Matrice de corr√©lation
    st.markdown(
        """
        <span style="color: blue; font-weight: bold; text-decoration: underline;">Matrice de corr√©lation</span>
        """,
        unsafe_allow_html=True
    )

    correlation_matrix = final_df.corr()
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
    plt.title('Matrice de corr√©lation des variables')
    plt.xticks(rotation=45, ha="right")
    st.pyplot(plt)

    st.markdown(
        """
        <div class="justified-text">
            L'analyse de la matrice de corr√©lation r√©v√®le des liens significatifs entre certaines variables. Par exemple, une corr√©lation forte entre la population mondiale et les √©missions de CO2, ainsi qu'entre le PIB et la temp√©rature globale, soulignant l'impact √©conomique et d√©mographique sur l'environnement.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Affichage des m√©triques de performance du mod√®le lin√©aire
    st.markdown(
        """
        <span style="color: blue; font-weight: bold; text-decoration: underline;">M√©triques de performance du mod√®le</span>
        """,
        unsafe_allow_html=True
    )

    # Cr√©ation et √©valuation du mod√®le
    X = final_df[['PIB (Md)', 'Population (m)', 'Total CO2 (mT)']]
    y = final_df['Var. Temp.']

    model = LinearRegression()
    model.fit(X, y)
    y_pred = model.predict(X)

    # Calcul des m√©triques de performance
    mse = mean_squared_error(y, y_pred)
    mae = mean_absolute_error(y, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y, y_pred)

    # Afficher les m√©triques de performance
    performance_metrics = {
        'Mean Absolute Error (MAE)': mae,
        'Mean Squared Error (MSE)': mse,
        'Root Mean Squared Error (RMSE)': rmse,
        'R¬≤ (Coefficient de d√©termination)': r2
    }
    performance_df = pd.DataFrame(performance_metrics.items(), columns=["M√©trique", "Valeur"])
    performance_df['Valeur'] = performance_df['Valeur'].map("{:.3f}".format)
    st.table(performance_df)

    st.markdown(
        """
        <div class="justified-text">
            Ces m√©triques illustrent la capacit√© du mod√®le lin√©aire √† pr√©dire la variable de temp√©rature √† partir des variables explicatives choisies. Un coefficient R¬≤ √©lev√© indique que le mod√®le explique une part importante de la variance observ√©e dans les donn√©es.
        </div>
        """,
        unsafe_allow_html=True
    )


# PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[5]: # PAGE 5 *** Mod√©lisation ***
    st.write("## Mod√©lisations")

    # Charger le fichier CSV avec chemin relatif
    csv_path = BASE_DIR / 'final_df10.csv'
    data = load_csv(csv_path, header=0)

    # Description
    st.markdown(
        """
        <p class="justified-text">
        S√©lectionnez les variables explicatives (y compris l'ann√©e) et l'ann√©e de d√©part pour entra√Æner un mod√®le de r√©gression pour pr√©dire 'Var. Temp.' en utilisant diff√©rents types de r√©gression.
        </p>
        """,
        unsafe_allow_html=True
    )

    # Liste des variables explicatives sans le PIB, la variable cible, et H√©m. Nord/Sud
    variables_exclues = ['PIB (Md)', 'Var. Temp.', 'H√©m. Nord', 'H√©m. Sud']
    variables_disponibles = [col for col in data.columns if col not in variables_exclues]
    variables_choisies = st.multiselect("Choisissez les variables explicatives :", variables_disponibles)

    # S√©lecteur d'ann√©e de d√©part
    annee_min, annee_max = data['Ann√©e'].min(), data['Ann√©e'].max()
    annee_depart = st.slider("S√©lectionnez l'ann√©e de d√©part :", int(annee_min), int(annee_max), int(annee_min))

    # Menu de s√©lection du type de r√©gression
    modele_selectionne = st.selectbox(
        "S√©lectionnez le mod√®le de r√©gression :", 
        ["R√©gression Lin√©aire", "Lasso", "Ridge", "R√©gression Polynomiale", "For√™t Al√©atoire"]
    )

    # Filtrer les donn√©es en fonction de l'ann√©e de d√©part
    data_filtre = data[data['Ann√©e'] >= annee_depart]

    if variables_choisies:
        # Pr√©paration des donn√©es
        X = data_filtre[variables_choisies]
        y = data_filtre['Var. Temp.']

        # Division des donn√©es en ensembles d'entra√Ænement et de test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Initialisation du mod√®le
        if modele_selectionne == "R√©gression Lin√©aire":
            modele = LinearRegression()
        elif modele_selectionne == "Lasso":
            modele = Lasso(alpha=0.1)
        elif modele_selectionne == "Ridge":
            modele = Ridge(alpha=1.0)
        elif modele_selectionne == "R√©gression Polynomiale":
            modele = Pipeline([('poly', PolynomialFeatures(degree=2)), ('linear', LinearRegression())])
        elif modele_selectionne == "For√™t Al√©atoire":
            modele = RandomForestRegressor(n_estimators=100, random_state=42)

        # Ajout des commentaires en fonction des choix de l'utilisateur
        if 'Population (m)' in variables_choisies:
            st.markdown(
                """
                <p class="justified-text">
                L'inclusion de la population comme variable explicative permet d'analyser son impact direct sur la variation de temp√©rature, ce qui est pertinent compte tenu des √©tudes sur la corr√©lation entre la croissance d√©mographique et les √©missions de gaz √† effet de serre.
                </p>
                """,
                unsafe_allow_html=True
            )

        if 'Total CO2 (mT)' in variables_choisies:
            st.markdown(
                """
                <p class="justified-text">
                En int√©grant les √©missions totales de CO2, l'analyse met l'accent sur la relation entre la hausse des √©missions et les changements de temp√©rature, essentielle pour comprendre l'impact des activit√©s humaines sur le climat.
                </p>
                """,
                unsafe_allow_html=True
            )

        # Commentaires en fonction du mod√®le s√©lectionn√©
        st.markdown(f"<p><strong>Vous avez s√©lectionn√© le mod√®le {modele_selectionne} :</strong></p>", unsafe_allow_html=True)
        if modele_selectionne == "R√©gression Lin√©aire":
            st.markdown("<p class='justified-text'>La r√©gression lin√©aire est appropri√©e pour mod√©liser les relations lin√©aires et permet une interpr√©tation facile gr√¢ce √† ses coefficients.</p>", unsafe_allow_html=True)
        elif modele_selectionne == "Lasso":
            st.markdown("<p class='justified-text'>Le mod√®le Lasso introduit une r√©gularisation, ce qui est utile pour r√©duire les coefficients non significatifs et peut conduire √† un mod√®le plus simple.</p>", unsafe_allow_html=True)
        elif modele_selectionne == "Ridge":
            st.markdown("<p class='justified-text'>Le mod√®le Ridge applique une r√©gularisation pour limiter la complexit√© des coefficients et ainsi r√©duire le risque de surapprentissage.</p>", unsafe_allow_html=True)
        elif modele_selectionne == "R√©gression Polynomiale":
            st.markdown("<p class='justified-text'>La r√©gression polynomiale permet de capturer des relations non lin√©aires plus complexes.</p>", unsafe_allow_html=True)
        elif modele_selectionne == "For√™t Al√©atoire":
            st.markdown("<p class='justified-text'>Le mod√®le de For√™t Al√©atoire est un puissant algorithme non lin√©aire qui combine plusieurs arbres de d√©cision pour am√©liorer la pr√©cision.</p>", unsafe_allow_html=True)

        # Commentaires en fonction de l'ann√©e de d√©part
        if annee_depart < 1900:
            st.markdown("<p class='justified-text'>L'utilisation d'une ann√©e de d√©part ant√©rieure √† 1900 peut int√©grer des tendances historiques √† long terme.</p>", unsafe_allow_html=True)
        elif 1950 <= annee_depart < 2000:
            st.markdown("<p class='justified-text'>L'analyse √† partir des ann√©es 1950 inclut l'√®re moderne o√π l'industrialisation a entra√Æn√© des changements significatifs.</p>", unsafe_allow_html=True)
        elif annee_depart >= 2000:
            st.markdown("<p class='justified-text'>En commen√ßant l'analyse √† partir des ann√©es 2000, l'√©tude se concentre sur les changements climatiques r√©cents.</p>", unsafe_allow_html=True)

        # Entra√Ænement du mod√®le
        modele.fit(X_train, y_train)

        # Pr√©dictions et √©valuation du mod√®le
        y_pred = modele.predict(X_test)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        st.markdown(f"<p><strong>Performance du mod√®le ({modele_selectionne}) :</strong></p>", unsafe_allow_html=True)
        st.write(f"Mean Squared Error (MSE) : {mse:.2f}")
        st.write(f"R¬≤ Score : {r2:.2f}")

        # Affichage des coefficients pour les mod√®les lin√©aires
        if modele_selectionne in ["R√©gression Lin√©aire", "Lasso", "Ridge"]:
            st.write("**Coefficients des variables explicatives :**")
            coeff_df = pd.DataFrame({'Variable': variables_choisies, 'Coefficient': modele.coef_})
            st.dataframe(coeff_df)

        # Affichage des pr√©dictions par rapport aux ann√©es avec matplotlib
        X_test['Ann√©e'] = data_filtre.loc[X_test.index, 'Ann√©e']
        result_df = pd.DataFrame({
            'Ann√©e': X_test['Ann√©e'],
            'Valeurs R√©elles': y_test,
            'Pr√©dictions': y_pred
        }).sort_values(by='Ann√©e')

        # Cr√©ation du graphique avec matplotlib
        plt.figure(figsize=(12, 6))
        plt.plot(result_df['Ann√©e'], result_df['Valeurs R√©elles'], label='Valeurs R√©elles', color='lightblue', linewidth=2)
        plt.plot(result_df['Ann√©e'], result_df['Pr√©dictions'], label='Pr√©dictions', color='blue', linewidth=2)
        plt.xlabel("Ann√©e")
        plt.ylabel("Temp√©rature")
        plt.title(f"Comparaison des Pr√©dictions et des Valeurs R√©elles par Ann√©e ({modele_selectionne})")
        plt.legend()

        # Espacer les √©tiquettes de l'axe des ann√©es et afficher une ann√©e sur cinq, en commen√ßant par l'ann√©e de d√©part
        annees_affichees = np.arange(annee_depart, annee_max + 1, 5)
        plt.xticks(annees_affichees, rotation=45)

        # Supprimer le s√©parateur des milliers
        plt.gca().get_xaxis().get_major_formatter().set_useOffset(False)

        st.pyplot(plt)
    else:
        st.markdown("<p class='justified-text'>Veuillez choisir des variables explicatives pour entra√Æner le mod√®le.</p>", unsafe_allow_html=True)


# PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6  *** PAGE 6 *** PAGE 6
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[6]: # PAGE 6 *** Pr√©dictions ***
    st.markdown('<div class="container">', unsafe_allow_html=True)
    st.write("## Pr√©dictions")

    # Charger le fichier CSV avec chemin relatif
    csv_path = BASE_DIR / 'final_df10.csv'
    data = load_csv(csv_path, header=0)

    # Description
    st.markdown("""
        <div class="justified-text">
        S√©lectionnez les variables explicatives et l'ann√©e de d√©part pour entra√Æner un mod√®le de r√©gression 
        et visualiser les pr√©dictions de la variable 'Var. Temp.' sur le graphique, avec des projections jusqu'en 2100.
        </div>
    """, unsafe_allow_html=True)

    # Liste des variables explicatives sans le PIB ni la variable cible
    variables_disponibles = [col for col in data.columns if col not in ['PIB (Md)', 'Var. Temp.']]
    variables_choisies = st.multiselect("Choisissez les variables explicatives :", variables_disponibles, format_func=lambda x: x)

    # S√©lecteur d'ann√©e de d√©part
    annee_min, annee_max = data['Ann√©e'].min(), data['Ann√©e'].max()
    annee_depart = st.slider("S√©lectionnez l'ann√©e de d√©part :", int(annee_min), int(annee_max), int(annee_min))

    # Menu de s√©lection du type de r√©gression
    modele_selectionne = st.selectbox("S√©lectionnez le mod√®le de r√©gression :", 
                                      ["R√©gression Lin√©aire", "Lasso", "Ridge", "R√©gression Polynomiale", "For√™t Al√©atoire"])

    # Filtrer les donn√©es en fonction de l'ann√©e de d√©part
    data_filtre = data[data['Ann√©e'] >= annee_depart]

    # V√©rifier si des variables explicatives ont √©t√© choisies
    if variables_choisies:
        # Pr√©paration des donn√©es
        X = data_filtre[variables_choisies]
        y = data_filtre['Var. Temp.']

        # Division des donn√©es en ensembles d'entra√Ænement et de test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # S√©lection du mod√®le de r√©gression
        if modele_selectionne == "R√©gression Lin√©aire":
            modele = LinearRegression()
        elif modele_selectionne == "Lasso":
            modele = Lasso(alpha=0.1)
        elif modele_selectionne == "Ridge":
            modele = Ridge(alpha=1.0)
        elif modele_selectionne == "R√©gression Polynomiale":
            modele = Pipeline([('poly', PolynomialFeatures(degree=2)), ('linear', LinearRegression())])
        elif modele_selectionne == "For√™t Al√©atoire":
            modele = RandomForestRegressor(n_estimators=100, random_state=42)

        # Ajout des commentaires en fonction des choix de l'utilisateur
        if 'Population (m)' in variables_choisies:
            st.markdown("""
            <div class="justified-text">
            L'inclusion de la population comme variable explicative permet d'analyser son impact direct sur la variation de temp√©rature, ce qui est pertinent compte tenu des √©tudes sur la corr√©lation entre la croissance d√©mographique et les √©missions de gaz √† effet de serre.
            </div>
            """, unsafe_allow_html=True)

        if 'Total CO2 (mT)' in variables_choisies:
            st.markdown("""
            <div class="justified-text">
            En int√©grant les √©missions totales de CO2, l'analyse met l'accent sur la relation entre la hausse des √©missions et les changements de temp√©rature, essentielle pour comprendre l'impact des activit√©s humaines sur le climat.
            </div>
            """, unsafe_allow_html=True)

        if 'Ann√©e' in variables_choisies:
            st.markdown("""
            <div class="justified-text">
            L'utilisation de l'ann√©e comme variable explicative permet de capturer des tendances temporelles, ce qui peut √™tre important pour mod√©liser des √©volutions chronologiques.
            </div>
            """, unsafe_allow_html=True)

        # Commentaires en fonction du mod√®le s√©lectionn√©
        st.write(f"**Vous avez s√©lectionn√© le mod√®le {modele_selectionne} :**")
        if modele_selectionne == "R√©gression Lin√©aire":
            st.markdown("""
            <div class="justified-text">
            La r√©gression lin√©aire est appropri√©e pour mod√©liser les relations lin√©aires et permet une interpr√©tation facile gr√¢ce √† ses coefficients.
            </div>
            """, unsafe_allow_html=True)
        elif modele_selectionne == "Lasso":
            st.markdown("""
            <div class="justified-text">
            Le mod√®le Lasso introduit une r√©gularisation, ce qui est utile pour r√©duire les coefficients non significatifs et peut conduire √† un mod√®le plus simple.
            </div>
            """, unsafe_allow_html=True)
        elif modele_selectionne == "Ridge":
            st.markdown("""
            <div class="justified-text">
            Le mod√®le Ridge applique une r√©gularisation pour limiter la complexit√© des coefficients et ainsi r√©duire le risque de surapprentissage.
            </div>
            """, unsafe_allow_html=True)
        elif modele_selectionne == "R√©gression Polynomiale":
            st.markdown("""
            <div class="justified-text">
            La r√©gression polynomiale permet de capturer des relations non lin√©aires plus complexes.
            </div>
            """, unsafe_allow_html=True)
        elif modele_selectionne == "For√™t Al√©atoire":
            st.markdown("""
            <div class="justified-text">
            Le mod√®le de For√™t Al√©atoire est un puissant algorithme non lin√©aire qui combine plusieurs arbres de d√©cision pour am√©liorer la pr√©cision.
            </div>
            """, unsafe_allow_html=True)

        # Commentaires en fonction de l'ann√©e de d√©part
        if annee_depart < 1900:
            st.markdown("""
            <div class="justified-text">
            L'utilisation d'une ann√©e de d√©part ant√©rieure √† 1900 peut int√©grer des tendances historiques √† long terme.
            </div>
            """, unsafe_allow_html=True)
        elif 1950 <= annee_depart < 2000:
            st.markdown("""
            <div class="justified-text">
            L'analyse √† partir des ann√©es 1950 inclut l'√®re moderne o√π l'industrialisation a entra√Æn√© des changements significatifs.
            </div>
            """, unsafe_allow_html=True)
        elif annee_depart >= 2000:
            st.markdown("""
            <div class="justified-text">
            En commen√ßant l'analyse √† partir des ann√©es 2000, l'√©tude se concentre sur les changements climatiques r√©cents.
            </div>
            """, unsafe_allow_html=True)

        # Entra√Ænement du mod√®le
        modele.fit(X_train, y_train)

        # Pr√©dictions sur l'ensemble de test
        y_pred_test = modele.predict(X_test)

        # Pr√©dictions sur l'ensemble complet pour visualisation
        y_pred_all = modele.predict(X)

        # G√©n√©rer des ann√©es futures jusqu'en 2100
        annees_futures = pd.DataFrame({'Ann√©e': np.arange(annee_max + 1, 2101)})

        # Simuler des valeurs futures pour les variables explicatives
        for var in variables_choisies:
            if var != 'Ann√©e':
                coef_tendance = (data_filtre[var].iloc[-1] - data_filtre[var].iloc[0]) / (data_filtre['Ann√©e'].iloc[-1] - data_filtre['Ann√©e'].iloc[0])
                annees_futures[var] = data_filtre[var].iloc[-1] + coef_tendance * (annees_futures['Ann√©e'] - data_filtre['Ann√©e'].iloc[-1])

        # Pr√©dictions sur les ann√©es futures
        y_pred_futures = modele.predict(annees_futures[variables_choisies])
        annees_futures['Pr√©dictions'] = y_pred_futures

        # √âvaluation du mod√®le
        mse = mean_squared_error(y_test, y_pred_test)
        r2 = r2_score(y_test, y_pred_test)

        st.write(f"**Performance du mod√®le ({modele_selectionne}) :**")
        st.write(f"Mean Squared Error (MSE) : {mse:.2f}")
        st.write(f"R¬≤ Score : {r2:.2f}")

        # Affichage des coefficients pour les mod√®les lin√©aires
        if modele_selectionne in ["R√©gression Lin√©aire", "Lasso", "Ridge"]:
            st.write("**Coefficients des variables explicatives :**")
            coeff_df = pd.DataFrame({'Variable': variables_choisies, 'Coefficient':            modele.coef_})
            st.dataframe(coeff_df)

        # Sauvegarder les variables explicatives choisies
        with open(BASE_DIR / 'variables_explicatives.pkl', 'wb') as file:
            pickle.dump(variables_choisies, file)

        # Sauvegarder le mod√®le entra√Æn√©
        with open(BASE_DIR / 'modele_entraine.pkl', 'wb') as file:
            pickle.dump(modele, file)

        # Affichage des pr√©dictions par rapport aux ann√©es avec matplotlib
        data_filtre['Pr√©dictions'] = y_pred_all
        st.markdown('<div class="graph-container">', unsafe_allow_html=True)
        plt.figure(figsize=(14, 7))
        plt.plot(data_filtre['Ann√©e'], data_filtre['Var. Temp.'], label='Valeurs R√©elles', color='lightblue', linewidth=2)
        plt.plot(data_filtre['Ann√©e'], data_filtre['Pr√©dictions'], label='Pr√©dictions', color='blue', linewidth=2)
        plt.plot(annees_futures['Ann√©e'], annees_futures['Pr√©dictions'], label='Pr√©dictions Futures', color='red', linewidth=2, linestyle='--')
        plt.xlabel("Ann√©e")
        plt.ylabel("Temp√©rature")
        plt.title(f"Comparaison des Pr√©dictions et des Valeurs R√©elles par Ann√©e ({modele_selectionne})")
        plt.legend()

        # Espacer les √©tiquettes de l'axe des ann√©es et afficher une ann√©e sur cinq, en commen√ßant par l'ann√©e de d√©part
        annees_affichees = np.arange(annee_depart, 2101, 5)
        plt.xticks(annees_affichees, rotation=45)
        st.pyplot(plt)
        st.markdown('</div>', unsafe_allow_html=True)

        # Courbes d'√©volution de la population et du CO2
        if 'Population (m)' in variables_choisies:
            st.markdown('<div class="graph-container">', unsafe_allow_html=True)
            plt.figure(figsize=(14, 5))
            plt.plot(data_filtre['Ann√©e'], data_filtre['Population (m)'], label='Population (m) R√©elle', color='green', linewidth=2)
            plt.plot(annees_futures['Ann√©e'], annees_futures['Population (m)'], label='Population (m) Projet√©e', color='darkgreen', linewidth=2, linestyle='--')
            plt.xlabel("Ann√©e")
            plt.ylabel("Population (m)")
            plt.title("√âvolution de la Population de l'Ann√©e S√©lectionn√©e √† 2100")
            plt.legend()
            st.pyplot(plt)
            st.markdown('</div>', unsafe_allow_html=True)

        if 'Total CO2 (mT)' in variables_choisies:
            st.markdown('<div class="graph-container">', unsafe_allow_html=True)
            plt.figure(figsize=(14, 5))
            plt.plot(data_filtre['Ann√©e'], data_filtre['Total CO2 (mT)'], label='Total CO2 (mT) R√©el', color='purple', linewidth=2)
            plt.plot(annees_futures['Ann√©e'], annees_futures['Total CO2 (mT)'], label='Total CO2 (mT) Projet√©', color='darkviolet', linewidth=2, linestyle='--')
            plt.xlabel("Ann√©e")
            plt.ylabel("Total CO2 (mT)")
            plt.title("√âvolution du CO2 de l'Ann√©e S√©lectionn√©e √† 2100")
            plt.legend()
            st.pyplot(plt)
            st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.write("Veuillez choisir des variables explicatives pour entra√Æner le mod√®le.")
    st.markdown('</div>', unsafe_allow_html=True)


# PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[7]: # PAGE 7 *** Limites ***
    st.write("## Limites")

    st.markdown(
        """
        <div class="justified-text">
            Il existe plusieurs limites √† ces pr√©dictions, et pour n'en citer que trois :
            <br><br>
            1- Selon <a href="https://population.un.org/wpp/Download/Standard/MostUsed/" style="color: blue;">l'ONU</a>, les projections de population mondiale ne peuvent exc√©der 10 milliards 291 millions d'individus, et le pic sera atteint en 2084.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Charger les donn√©es ONU depuis le fichier CSV
    onu_population = load_csv('onu_population.csv', sep=';', encoding='ISO-8859-1')

    # Calcul du total de la population par ann√©e
    total_population_by_year = onu_population.groupby('Ann√©e')['Population'].sum()

    # Cr√©ation du graphique pour le total par ann√©e avec annotations
    plt.figure(figsize=(6, 3))
    plt.plot(total_population_by_year.index, total_population_by_year, marker=' ', linewidth=1, color='green')

    # Personnalisation du graphique
    plt.title('√âvolution de la Population mondiale de 2024 √† 2100', fontsize=12)
    plt.ylabel('Total Population (millions)', fontsize=10)
    plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)

    # Annotation des valeurs tous les 20 ans et la derni√®re ann√©e
    for year in list(range(2044, 2101, 20)) + [2100]:
        population = total_population_by_year.get(year, 0)
        plt.text(year, population - 250, f'{population:,.0f}', fontsize=10, ha='center', va='bottom', color='blue')

    plt.tight_layout()
    st.pyplot(plt)

    st.markdown(
        """
        <div class="justified-text">
            <br>
            2- Selon <a href="https://fr.statista.com/statistiques/559789/reserves-mondiales-de-petrole-brut-1990/#:~:text=En%202023%2C%20les%20r%C3%A9serves%20mondiales,de%201.569%20milliards%20de%20barils." style="color: blue;">Statista</a>, les r√©serves mondiales de p√©trole sont estim√©es √† 1570 milliards de barils. Avec une consommation actuelle de 100 millions de barils par jour, il reste environ 40 ans de stocks, √† consommation constante. Cependant, en pratique, les producteurs n'exporteront plus bien avant l'√©puisement des r√©serves.
            <br><br>
            Selon <a href="https://www.planete-energies.com/fr/media/chiffres/consommation-mondiale-gaz-naturel." style="color: blue;">Plan√®te √©nergie (Total √ânergies)</a>, les r√©serves mondiales de gaz s'√©l√®vent √† 188 000 milliards de m¬≥. Avec une consommation actuelle de 3940 milliards de m¬≥ par an, il reste environ 47 ans de stocks, √† consommation constante. Il est √† noter que la Russie et l'Iran poss√®dent √† elles deux 37% des r√©serves mondiales.
            <br><br>
            Toujours selon <a href="https://www.planete-energies.com/fr/media/chiffres/reserves-mondiales-charbon" style="color: blue;">Plan√®te √©nergie (Total √ânergies)</a>, les r√©serves mondiales de charbon couvrent 200 ans de consommation actuelle. Les √âtats-Unis, la Russie, l'Australie, la Chine et l'Inde d√©tiennent 76% des r√©serves mondiales.
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="justified-text">
            <br>
            3- Le site <a href="https://www.cea.fr/presse/Pages/actualites-communiques/environnement/bilan-mondial-methane-record-emission.aspx#:~:text=%E2%80%8BLe%20bilan%20mondial%20de,des%20%C3%A9missions%20mondiales%20de%20m%C3%A9thane." style="color: blue;">CEA</a> pr√©cise que les activit√©s humaines ont √©mis un record de 400 millions de tonnes m√©triques de m√©thane en 2020. Or, le m√©thane (CH‚ÇÑ) a un potentiel de r√©chauffement global (PRG) 85 fois sup√©rieur √† celui du CO‚ÇÇ sur 20 ans, qui diminue √† 30 fois au bout de 100 ans selon la formule PRG(t) = 84.e^(-0.05776t), o√π t d√©signe le temps.
            <br><br>
            Pour information, ce m√©thane provient de l'agriculture, de l'√©levage, de la gestion des d√©chets, de l'industrie √©nerg√©tique (fuites lors d'extractions de p√©trole et de charbon), et de la combustion de la biomasse.
            <br><br>
            La courbe ci-dessous donne un aper√ßu des stocks de m√©thane en √©quivalent CO‚ÇÇ dans l'atmosph√®re en fonction du calcul de son PRG, pour une √©mission constante annuelle de 400 millions de tonnes m√©triques. On observe qu'au bout de 15 ans, 350 gigatonnes d'√©quivalent CO‚ÇÇ ont √©t√© ajout√©es √† l'atmosph√®re.
        </div>
        """,
        unsafe_allow_html=True
    )

    # Calcul des √©missions de m√©thane en √©quivalent CO2 sur 75 ans
    PRG_initial = 84
    lambda_decay = 0.05776
    emissions_per_year = 0.400  # √©missions en milliards de tonnes de m√©thane par an
    years = np.arange(0, 76)  # simulation sur 75 ans

    PRG_values = PRG_initial * np.exp(-lambda_decay * years)
    annual_emissions_CO2eq = emissions_per_year * PRG_values  # √©missions annuelles en √©quivalent CO2
    cumulative_emissions_CO2eq = np.cumsum(annual_emissions_CO2eq)  # cumul des √©missions

    # Cr√©ation du DataFrame pour visualisation
    df_75_years = pd.DataFrame({
        'Ann√©e': years,
        'PRG annuel √©quivalent CO2 (millions de tonnes)': annual_emissions_CO2eq,
        'Cumul CO2 √©quivalent (millions de tonnes)': cumulative_emissions_CO2eq
    })

    # Cr√©ation de l'histogramme et de la courbe cumul√©e
    plt.figure(figsize=(14, 7))
    plt.bar(df_75_years['Ann√©e'], df_75_years['Cumul CO2 √©quivalent (millions de tonnes)'], color='lightblue', label='Cumul CO2 √©quivalent')
    plt.plot(df_75_years['Ann√©e'], df_75_years['Cumul CO2 √©quivalent (millions de tonnes)'], color='blue', marker='o', label='Courbe Cumul CO2 √©quivalent')

    plt.title('Histogramme et courbe du cumul CO2 √©quivalent sur 75 ans', fontsize=12)
    plt.xlabel('Ann√©e')
    plt.ylabel('Cumul CO2 √©quivalent (Gigatonnes)', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.legend()

    st.pyplot(plt)


# PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
elif page == pages[8]: # PAGE 8 *** Conclusions ***
    st.write("## Conclusions")

    st.markdown(
        """
        <div class="justified-text">
            Cette analyse a permis de mettre en pratique des techniques avanc√©es de data analyse appliqu√©es au domaine complexe et essentiel qu'est le r√©chauffement climatique. En explorant des jeux de donn√©es vari√©s, allant des temp√©ratures globales aux √©missions de gaz √† effet de serre et √† la croissance √©conomique, nous avons pu comprendre l'interd√©pendance entre ces facteurs. 
            <br><br>
            L'apprentissage de la data analyse a √©t√© au c≈ìur de la d√©marche, int√©grant des √©tapes de pr√©paration de donn√©es, de visualisation et de mod√©lisation pour extraire des informations significatives. 
            <br><br>
            Les comp√©tences acquises en manipulation de donn√©es, en cr√©ation de visualisations pertinentes et en application de mod√®les de r√©gression ont permis de r√©v√©ler des corr√©lations importantes, telles que le lien entre le PIB mondial, la croissance de la population, et l'augmentation des temp√©ratures. L'utilisation de m√©triques de performance et de l'√©valuation des mod√®les a renforc√© la capacit√© √† valider des hypoth√®ses sur la base de donn√©es r√©elles.
            <br><br>
            Cette application pratique a √©galement mis en √©vidence les limites des pr√©dictions, rappelant que l'analyse des donn√©es historiques, bien qu'informative, doit √™tre compl√©t√©e par une compr√©hension approfondie des facteurs ext√©rieurs et des incertitudes futures. La mod√©lisation nous a montr√© que si la data analyse est puissante pour √©tablir des relations et pr√©voir des tendances, elle n√©cessite une interpr√©tation prudente dans le contexte de la complexit√© environnementale.
            <br><br>
            L'√©tude des variations de temp√©rature et de leurs causes a soulign√© l'importance d'une approche multidimensionnelle, m√™lant des donn√©es √©conomiques, d√©mographiques et climatiques. Elle a d√©montr√© comment l'apprentissage de la data analyse peut √™tre un outil indispensable pour sensibiliser, pr√©voir, et guider les politiques en mati√®re de lutte contre le changement climatique.
            <br><br>
            En conclusion, cette exp√©rience souligne la pertinence de l'int√©gration des techniques de data analyse dans la recherche de solutions aux d√©fis environnementaux actuels et futurs.
        </div>
        """,
        unsafe_allow_html=True
    )


# PAGE 9  ***  PAGE 9  *** PAGE 9 *** PAGE 9 *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9 *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------