# -*- coding: utf-8 -*-

import io
import warnings
import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

from io import StringIO
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.pipeline import Pipeline

# Fonction pour charger un fichier CSV
def load_csv(file_path, **kwargs):
    return pd.read_csv(file_path, **kwargs)

st.sidebar.title("Sommaire")

pages = ["Projet", "Jeux de donn√©es sources", "Pertinence des donn√©es", "Pr√©paration des donn√©es",
         "Dataset final & DataVizualization", "Mod√©lisation", "Pr√©dictions", "Limites", "Conclusions"]

# PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

page = st.sidebar.radio("", pages)

# Ajouter des commentaires en dessous du sommaire
st.sidebar.write("---")  # Ligne de s√©paration facultative
st.sidebar.write("Cohorte avril 2024 / DA")
st.sidebar.write("Sujet : Temp√©ratures Terrestres")
st.sidebar.write("Eric Potiron")

# PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0 *** PAGE 0  *** PAGE 0

# Ajout du CSS pour la justification
st.markdown(
    """
    <style>
    .justified-text {
        text-align: justify;
        line-height: 1.5; /* Ajustez la valeur pour l'espacement souhait√© entre les lignes */
    }
    </style>
    """,
    unsafe_allow_html=True
)

if page == pages[0]:
    st.write("### <u>Contexte</u>", unsafe_allow_html=True)

    # Texte justifi√© pour la page Contexte
    st.markdown(
        """
        <p class="justified-text">
        Il y a 20 000 ans, la Terre √©tait en pleine p√©riode glaciaire, appel√©e le Dernier Maximum Glaciaire. Une grande partie de l'h√©misph√®re nord √©tait recouverte d'√©paisses calottes glaciaires, notamment en Am√©rique du Nord, en Europe et en Asie. Les glaciers atteignaient parfois plusieurs kilom√®tres d'√©paisseur, transformant les paysages et modifiant les √©cosyst√®mes. Le niveau des oc√©ans √©tait plus bas d'environ 120 m√®tres, car une grande quantit√© d'eau √©tait pi√©g√©e sous forme de glace. En cons√©quence, des ponts terrestres reliaient des terres aujourd'hui s√©par√©es par des mers, facilitant la migration des esp√®ces, y compris les humains. Les r√©gions proches de l'√©quateur restaient relativement plus chaudes et humides, servant de refuges pour la biodiversit√©. La v√©g√©tation dans les zones temp√©r√©es et froides √©tait domin√©e par la toundra et la steppe, avec tr√®s peu de for√™ts‚Ä¶
        </p>
        <p class="justified-text">
        Un r√©chauffement climatique de +5¬∞C nous s√©pare de cette p√©riode. Qui a dur√© 20.000 ans.
        </p>
        """,
        unsafe_allow_html=True
    )

    st.write("### <u>Objectif</u>", unsafe_allow_html=True)

    # Texte justifi√© pour l'objectif du projet
    st.markdown(
        """
        <p class="justified-text">
        L'objectif de ce projet est de d√©montrer comment l'apprentissage des techniques de data analyse peut √™tre appliqu√© pour √©tudier et comprendre les dynamiques du r√©chauffement climatique. En utilisant des jeux de donn√©es historiques sur les variations de temp√©rature, les √©missions de gaz √† effet de serre, et des indicateurs √©conomiques et d√©mographiques, ce projet vise √† :<br><br>
            <span style="margin-left:20px; display: inline-block;">
            Explorer et visualiser les tendances mondiales li√©es au r√©chauffement climatique et √† l'industrialisation.<br><br>
            √âvaluer les corr√©lations entre diff√©rents facteurs, tels que le PIB, la croissance d√©mographique et les √©missions de CO‚ÇÇ, pour identifier les relations cl√©s influen√ßant le climat.<br><br>
            Utiliser des mod√®les de r√©gression et d'autres techniques analytiques pour pr√©dire les variations futures des temp√©ratures mondiales en fonction des donn√©es actuelles et des sc√©narios projet√©s.<br><br>
            Mettre en avant les limites et les d√©fis de l'analyse de donn√©es environnementales, en insistant sur l'importance de la contextualisation des r√©sultats et des mod√®les dans le cadre d'une compr√©hension plus large des ph√©nom√®nes climatiques.<br><br>
            Ce projet cherche √† illustrer l'application concr√®te des comp√©tences en data analyse pour contribuer √† une meilleure compr√©hension des probl√©matiques environnementales, tout en servant de base de r√©flexion pour d√©velopper des strat√©gies d'adaptation face au changement climatique.<br><br>
            </span>
        Les 3 principaux gaz √† effet de serre sont le dioxyde de carbone (CO¬≤), le m√©thane (CH4) et le protoxyde d‚Äôazote (N¬≤O). Le CO¬≤ est responsable de 65% de l‚Äôeffet de serre anthropique, c‚Äôest-√†-dire d√ª aux activit√©s humaines.
        </p>
        <p class="justified-text">
        C‚Äôest sur ce dernier point que ce projet portera.
        </p>
        """,
        unsafe_allow_html=True
    )

# PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1 *** PAGE 1  *** PAGE 1
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[1]:
    

    st.write("### Jeux de donn√©es sources")

    if st.checkbox("### üìÅ **Zonal annual means.csv**"):
       df1 = load_csv('Zonal annual means.csv', header=0)
       rows_df1, cols_df1 = df1.shape # Lignes et colonnes
       num_duplicates_df1 = df1.duplicated().sum() # Doublons
       manquantes_df1 = df1.isna().sum().to_frame().T # Valeurs manquantes
       info_df1 = pd.DataFrame({'Column': df1.columns, 'Non-Null Count': [df1[col].notnull().sum() for col in df1.columns], 'Dtype': [df1[col].dtype for col in df1.columns] })
       info_df1 = info_df1.T  # Transpose le DataFrame pour un affichage horizontal
       info_df1.columns = info_df1.iloc[0]  # D√©finit les noms de colonnes
       info_df1 = info_df1[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : NASA")
       st.write(f"Acc√®s libre : (https://data.giss.nasa.gov/gistemp/)")
       st.markdown(
        """
        <p class="justified-text">
        Le fichier contient des donn√©es annuelles moyennes de variations de temp√©rature pour diff√©rentes r√©gions du globe, de 1880 √† une date r√©cente.
        <br>
        <br>
        La NASA se source via diff√©rents moyens :
        <br>
        <strong><u>Stations m√©t√©orologiques de surface</strong></u> : principalement de milliers de stations m√©t√©orologiques r√©parties dans le monde entier. Ces stations mesurent les temp√©ratures √† des intervalles r√©guliers, g√©n√©ralement toutes les heures ou toutes les trois heures.
        <br>
        <strong><u>Bou√©es oc√©aniques</strong></u> : les bou√©es flottantes dans les oc√©ans collectent des donn√©es sur la temp√©rature de surface de la mer. Elles compl√®tent les mesures terrestres en couvrant les vastes zones oc√©aniques.
        <br>
     	<strong><u>Navires et plates-formes p√©troli√®res</strong></u>.
        <br>
     	<strong><u>Satellites</strong></u> : ils fournissent des mesures de la temp√©rature de la surface terrestre et des oc√©ans. Ils offrent une couverture globale et sont particuli√®rement utiles pour les r√©gions √©loign√©es et oc√©aniques.
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df1} lignes et {cols_df1} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df1}")
       st.write(f"**Valeurs manquantes**:")
       st.dataframe(manquantes_df1)
       st.write(f"**Informations** :")
       st.dataframe(info_df1)
       st.write(f"**En t√™te :**")  
       st.write(df1.head())

    if st.checkbox("### üìÅ **Southern Hemisphere-mean monthly, seasonal, and annual means.csv**"):
       df5 = load_csv('Southern Hemisphere-mean monthly, seasonal, and annual means.csv', header=1)
       rows_df5, cols_df5 = df5.shape # Lignes et colonnes
       num_duplicates_df5 = df5.duplicated().sum() # Doublons
       manquantes_df5 = df5.isna().sum().to_frame().T # Valeurs manquantes
       info_df5 = pd.DataFrame({'Column': df5.columns, 'Non-Null Count': [df5[col].notnull().sum() for col in df5.columns], 'Dtype': [df5[col].dtype for col in df5.columns] })
       info_df5 = info_df5.T  # Transpose le DataFrame pour un affichage horizontal
       info_df5.columns = info_df5.iloc[0]  # D√©finit les noms de colonnes
       info_df5 = info_df5[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : NASA")
       st.write(f"Acc√®s libre : (https://data.giss.nasa.gov/gistemp/)")
       st.markdown(
        """
        <p class="justified-text">
        Le fichier contient des donn√©es de variations de temp√©rature moyennes pour l'h√©misph√®re nord, avec des valeurs mensuelles, saisonni√®res et annuelles.
        <br>
        <br>
        La NASA se source via diff√©rents moyens :
        <br>
        <strong><u>Stations m√©t√©orologiques de surface</strong></u> : principalement de milliers de stations m√©t√©orologiques r√©parties dans le monde entier. Ces stations mesurent les temp√©ratures √† des intervalles r√©guliers, g√©n√©ralement toutes les heures ou toutes les trois heures.
        <br>
        <strong><u>Bou√©es oc√©aniques</strong></u> : les bou√©es flottantes dans les oc√©ans collectent des donn√©es sur la temp√©rature de surface de la mer. Elles compl√®tent les mesures terrestres en couvrant les vastes zones oc√©aniques.
        <br>
     	<strong><u>Navires et plates-formes p√©troli√®res</strong></u>.
        <br>
     	<strong><u>Satellites</strong></u> : ils fournissent des mesures de la temp√©rature de la surface terrestre et des oc√©ans. Ils offrent une couverture globale et sont particuli√®rement utiles pour les r√©gions √©loign√©es et oc√©aniques.
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df5} lignes et {cols_df5} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df5}")
       st.write(f"**Valeurs manquantes** :")
       st.dataframe(manquantes_df5)
       st.write(f"**Informations** :")
       st.dataframe(info_df5)
       st.write(f"**En t√™te** :")  
       st.write(df5.head())

    if st.checkbox("### üìÅ **Northern Hemisphere-mean monthly, seasonal, and annual means.csv**"):
       df8 = load_csv('Northern Hemisphere-mean monthly, seasonal, and annual means.csv', header=1)
       rows_df8, cols_df8 = df8.shape # Lignes et colonnes
       num_duplicates_df8 = df8.duplicated().sum() # Doublons
       manquantes_df8 = df8.isna().sum().to_frame().T # Valeurs manquantes
       info_df8 = pd.DataFrame({'Column': df8.columns, 'Non-Null Count': [df8[col].notnull().sum() for col in df8.columns], 'Dtype': [df8[col].dtype for col in df8.columns] })
       info_df8 = info_df8.T  # Transpose le DataFrame pour un affichage horizontal
       info_df8.columns = info_df8.iloc[0]  # D√©finit les noms de colonnes
       info_df8 = info_df8[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : NASA")
       st.write(f"Acc√®s libre : (https://data.giss.nasa.gov/gistemp/)")
       st.markdown(
        """
        <p class="justified-text">
        Le fichier contient des donn√©es de variations de temp√©rature moyennes pour l'h√©misph√®re sud, avec des valeurs mensuelles, saisonni√®res et annuelles.
        <br>
        <br>
        La NASA se source via diff√©rents moyens :
        <br>
        <strong><u>Stations m√©t√©orologiques de surface</strong></u> : principalement de milliers de stations m√©t√©orologiques r√©parties dans le monde entier. Ces stations mesurent les temp√©ratures √† des intervalles r√©guliers, g√©n√©ralement toutes les heures ou toutes les trois heures.
        <br>
        <strong><u>Bou√©es oc√©aniques</strong></u> : les bou√©es flottantes dans les oc√©ans collectent des donn√©es sur la temp√©rature de surface de la mer. Elles compl√®tent les mesures terrestres en couvrant les vastes zones oc√©aniques.
        <br>
     	<strong><u>Navires et plates-formes p√©troli√®res</strong></u>.
        <br>
     	<strong><u>Satellites</strong></u> : ils fournissent des mesures de la temp√©rature de la surface terrestre et des oc√©ans. Ils offrent une couverture globale et sont particuli√®rement utiles pour les r√©gions √©loign√©es et oc√©aniques.
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df8} lignes et {cols_df8} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df8}")
       st.write(f"**Valeurs manquantes** :")
       st.dataframe(manquantes_df8)
       st.write(f"**Informations** :")
       st.dataframe(info_df8)
       st.write(f"**En t√™te**:")  
       st.write(df8.head())

    if st.checkbox("### üìÅ **Global-mean monthly, seasonal, and annual means.csv**"):
       df7 = load_csv('Global-mean monthly, seasonal, and annual means.csv', header=1)
       rows_df7, cols_df7 = df7.shape # Lignes et colonnes
       num_duplicates_df7 = df7.duplicated().sum() # Doublons
       manquantes_df7 = df7.isna().sum().to_frame().T # Valeurs manquantes
       info_df7 = pd.DataFrame({'Column': df7.columns, 'Non-Null Count': [df7[col].notnull().sum() for col in df7.columns], 'Dtype': [df7[col].dtype for col in df7.columns] })
       info_df7 = info_df7.T  # Transpose le DataFrame pour un affichage horizontal
       info_df7.columns = info_df7.iloc[0]  # D√©finit les noms de colonnes
       info_df7 = info_df7[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : NASA")
       st.write(f"Acc√®s libre : (https://data.giss.nasa.gov/gistemp/)")
       st.markdown(
        """
        <p class="justified-text">
        Le fichier contient des donn√©es de variations de temp√©ratures moyennes globales (terres et oc√©ans combin√©s) avec des moyennes mensuelles, saisonni√®res et annuelles.
        <br>
        <br>
        La NASA se source via diff√©rents moyens :
        <br>
        <strong><u>Stations m√©t√©orologiques de surface</strong></u> : principalement de milliers de stations m√©t√©orologiques r√©parties dans le monde entier. Ces stations mesurent les temp√©ratures √† des intervalles r√©guliers, g√©n√©ralement toutes les heures ou toutes les trois heures.
        <br>
        <strong><u>Bou√©es oc√©aniques</strong></u> : les bou√©es flottantes dans les oc√©ans collectent des donn√©es sur la temp√©rature de surface de la mer. Elles compl√®tent les mesures terrestres en couvrant les vastes zones oc√©aniques.
        <br>
     	<strong><u>Navires et plates-formes p√©troli√®res</strong></u>.
        <br>
     	<strong><u>Satellites</strong></u> : ils fournissent des mesures de la temp√©rature de la surface terrestre et des oc√©ans. Ils offrent une couverture globale et sont particuli√®rement utiles pour les r√©gions √©loign√©es et oc√©aniques.
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df7} lignes et {cols_df7} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df7}")
       st.write(f"**Valeurs manquantes** :")
       st.dataframe(manquantes_df7)
       st.write(f"**Informations** :")
       st.dataframe(info_df7)
       st.write(f"**En t√™te** :")  
       st.write(df7.head())

    if st.checkbox("### üìÅ **global-gdp-over-the-long-run.csv**"):
       df_pib = load_csv('global-gdp-over-the-long-run.csv', header=0)
       rows_df_pib, cols_df_pib = df_pib.shape # Lignes et colonnes
       num_duplicates_df_pib = df_pib.duplicated().sum() # Doublons
       manquantes_df_pib = df_pib.isna().sum().to_frame().T # Valeurs manquantes
       info_df_pib = pd.DataFrame({'Column': df_pib.columns, 'Non-Null Count': [df_pib[col].notnull().sum() for col in df_pib.columns], 'Dtype': [df_pib[col].dtype for col in df_pib.columns] })
       info_df_pib = info_df_pib.T  # Transpose le DataFrame pour un affichage horizontal
       info_df_pib.columns = info_df_pib.iloc[0]  # D√©finit les noms de colonnes
       info_df_pib = info_df_pib[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : OCDE")
       st.write(f"Acc√®s libre : (https://ourworldindata.org/)")
       st.markdown(
        """
        <p class="justified-text">
        Ce fichier donne une vision de l‚Äô√©volution du PIB mondial depuis l‚Äôan 1 jusqu‚Äô√† 2022. Ces estimations historiques du PIB sont ajust√©es en fonction de l'inflation. Trois sources sont combin√©es pour cr√©er cette s√©rie chronologique : la base de donn√©es Maddison (avant 1820), la base de donn√©es du projet Maddison (1820-1989) et la Banque mondiale (√† partir de 1890). Le terme $ US constants d√©signe un $ US ayant un pouvoir d‚Äôachat constant dans le temps, et donc corrig√© de l‚Äôimpact de la variation des prix.
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df_pib} lignes et {cols_df_pib} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df_pib}")
       st.write(f"**Valeurs manquantes :**")
       st.dataframe(manquantes_df_pib)
       st.write(f"**Informations :**")
       st.dataframe(info_df_pib)
       st.write(f"**En t√™te :**")  
       st.write(df_pib.head())

    if st.checkbox("### üìÅ **owid-co2-data.csv**"):
       df4 = load_csv('owid-co2-data.csv', header=0)
       rows_df4, cols_df4 = df4.shape # Lignes et colonnes
       num_duplicates_df4 = df4.duplicated().sum() # Doublons
       manquantes_df4 = df4.isna().sum().to_frame().T # Valeurs manquantes
       info_df4 = pd.DataFrame({'Column': df4.columns, 'Non-Null Count': [df4[col].notnull().sum() for col in df4.columns], 'Dtype': [df4[col].dtype for col in df4.columns] })
       info_df4 = info_df4.T  # Transpose le DataFrame pour un affichage horizontal
       info_df4.columns = info_df4.iloc[0]  # D√©finit les noms de colonnes
       info_df4 = info_df4[1:]  # Supprime la premi√®re ligne redondante

       st.write(f"Source : OWID")
       st.write(f"Acc√®s libre : (https://github.com/owid/co2-data)")
       st.markdown(
        """
        <p class="justified-text">
        Le fichier contient des donn√©es sur les √©missions de CO‚ÇÇ et d'autres gaz √† effet de serre par pays, couvrant plusieurs indicateurs environnementaux et √©conomiques.
        Ce fichier est particuli√®rement utile pour analyser les tendances globales et sectorielles des √©missions de CO‚ÇÇ, l'impact des diff√©rents secteurs d'activit√©, et la contribution des gaz √† effet de serre au changement climatique. Il permet √©galement de comparer l'intensit√© des √©missions entre pays et au fil du temps, en tenant compte de la population et du PIB. 
        <br>
        <br>
        <strong><u>Global Carbon Project (GCP)</strong></u> : fournit des estimations des √©missions mondiales de CO‚ÇÇ bas√©es sur les inventaires nationaux, les √©missions de combustion fossile, et les changements d'utilisation des terres.
        <br>
        <strong><u>Agence Internationale de l'√ânergie (AIE)</strong></u> : offre des donn√©es sur les √©missions de CO‚ÇÇ issues de la combustion d'√©nergie.
        <br>
     	<strong><u>Carbon Dioxide Information Analysis Center (CDIAC)</strong></u> : a une longue histoire de collecte et de publication de donn√©es sur les √©missions de CO‚ÇÇ.
        <br>
     	<strong><u>Emissions Database for Global Atmospheric Research (EDGAR)</strong></u> : propose des donn√©es d√©taill√©es sur les √©missions de gaz √† effet de serre et de polluants atmosph√©riques.
        <br>
     	<strong><u>Donn√©es gouvernementales</strong></u> : inventaires Nationaux. Les pays rapportent leurs √©missions de gaz √† effet de serre dans le cadre des engagements pris sous la Convention-cadre des Nations Unies sur les changements climatiques (CCNUCC).
        </p>
        """,
        unsafe_allow_html=True
        )
       st.write(f"**Le dataframe contient** {rows_df4} lignes et {cols_df4} colonnes.")
       st.write(f"Le nombre de **doublons** est de : {num_duplicates_df4}")
       st.write(f"**Valeurs manquantes :**")
       st.dataframe(manquantes_df4)
       st.write(f"**Informations :**")
       st.dataframe(info_df4)
       st.write(f"**En t√™te :**")  
       st.write(df4.head())


# PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2 *** PAGE 2  *** PAGE 2
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[2]:

    st.write("## Pertinence des donn√©es")

    # Disposition des boutons "Tout afficher" et "Tout masquer" c√¥te √† c√¥te
    col1, col2 = st.columns([1, 1])
    with col1:
        show_all = st.button("Tout afficher")
    with col2:
        hide_all = st.button("Tout masquer")

    # Si "Tout afficher" est cliqu√©, toutes les sections sont visibles
    # Si "Tout masquer" est cliqu√©, toutes les sections sont masqu√©es
    if show_all:
        display_sections = True
    elif hide_all:
        display_sections = False
    else:
        display_sections = None  # Aucun bouton n'est cliqu√©, on laisse les checkboxes individuelles contr√¥ler l'affichage

    if show_all or st.checkbox("Variations mondiales des temp√©ratures globales par ann√©e") :
        df1 = pd.read_csv('Zonal annual means.csv', header=0)
        plt.figure(figsize=(8, 4))
        plt.plot(df1['Year'], df1['Glob'], marker='.', linestyle='-', color='blue')
        plt.title('Variations mondiales des temp√©ratures globales par ann√©e')
        plt.xlabel('Ann√©e')
        plt.ylabel('Temp√©rature Globale (¬∞C)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
        """
        <p class="justified-text">
        La courbe montre une tendance globale des temp√©ratures au fil des ann√©es. Il est possible de distinguer une augmentation progressive des temp√©ratures globales sur la p√©riode couverte par les donn√©es. Cette tendance indique un r√©chauffement climatique √©vident, avec des fluctuations annuelles, mais une augmentation g√©n√©rale sur le long terme. Cela sugg√®re un effet des activit√©s humaines et des changements environnementaux sur les temp√©ratures moyennes globales, notamment depuis le d√©but de l'√®re industrielle.
        <br>
        On peut d‚Äôores et d√©j√† constater une augmentation significative √† partir de 1960.
        </p>
        """,
        unsafe_allow_html=True)

    if show_all or st.checkbox("Variations mondiales des temp√©ratures pour les h√©misph√®res Nord et Sud") :
        df1 = pd.read_csv('Zonal annual means.csv', header=0)
        plt.figure(figsize=(8, 4))
        plt.plot(df1['Year'], df1['NHem'], marker='.', linestyle='-', color='green', label='H√©misph√®re Nord')
        plt.plot(df1['Year'], df1['SHem'], marker='.', linestyle='-', color='orange', label='H√©misph√®re Sud')
        plt.title('Variations mondiales des temp√©ratures pour les h√©misph√®res Nord et Sud')
        plt.xlabel('Ann√©e')
        plt.ylabel('Temp√©rature (¬∞C)')
        plt.legend(loc='best')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
        """
        <p class="justified-text">
        La courbe montre que les temp√©ratures des deux h√©misph√®res ont une tendance similaire avec une augmentation progressive sur la p√©riode √©tudi√©e. Cependant, il y a quelques diff√©rences notables : L'h√©misph√®re nord montre une tendance l√©g√®rement plus marqu√©e √† la hausse par rapport √† l'h√©misph√®re sud, ce qui pourrait √™tre li√© √† une concentration plus importante d'activit√©s humaines et industrielles dans cette r√©gion.
        <br>
        Ces r√©sultats renforcent l'hypoth√®se d'un r√©chauffement climatique global, bien que les impacts sp√©cifiques puissent varier l√©g√®rement entre les h√©misph√®res.
        </p>
        """,
        unsafe_allow_html=True)

    if show_all or st.checkbox("√âvolution du PIB mondial √† partir de 1850"):
        df_pib = pd.read_csv('global-gdp-over-the-long-run.csv', header=0)
        df_pib_1850 = df_pib[df_pib['Year'] >= 1850]
        df_pib_1850['GDP'] = df_pib_1850['GDP'].astype('float64')
        df_pib_1850['GDP'] = df_pib_1850['GDP'] / 1000000000
        plt.figure(figsize=(8, 4))
        plt.plot(df_pib_1850['Year'], df_pib_1850['GDP'], marker='.', linestyle='-', color='purple')
        plt.title('√âvolution du PIB mondial √† partir de 1850 en milliards de dollars')
        plt.xlabel('Ann√©e')
        plt.ylabel('PIB mondial (en dollars)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
        """
        <p class="justified-text">
        La tendance g√©n√©rale est donc celle d'une augmentation continue du PIB mondial, traduisant une expansion √©conomique globale, malgr√© certaines p√©riodes d'instabilit√©. Cela refl√®te une augmentation significative de la production, de la technologie et des capacit√©s √©conomiques √† l‚Äô√©chelle mondiale.
        </p>
        """,
        unsafe_allow_html=True)

    if show_all or st.checkbox("Total des √©missions de CO¬≤ mondiales"):
        df4 = pd.read_csv('owid-co2-data.csv', header=0, sep=",")
        df4_world = df4[df4['country'] == 'World']
        plt.figure(figsize=(8, 4))
        plt.plot(df4_world['year'], df4_world['co2_including_luc'], marker='.', linestyle='-', color='brown')
        plt.title('√âmissions mondiales de CO¬≤ (y compris l\'utilisation des terres)')
        plt.xlabel('Ann√©e')
        plt.ylabel('√âmissions de CO2 (Gt)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
        """
        <p class="justified-text">
        La courbe montre une augmentation significative des √©missions mondiales de CO‚ÇÇ depuis 1850. Voici quelques observations cl√©s :
        <br>
        Tendance g√©n√©rale : Les √©missions de CO‚ÇÇ ont suivi une tendance √† la hausse continue, en particulier apr√®s la Seconde Guerre mondiale, marquant l'√®re de la forte industrialisation et de l'augmentation de la consommation √©nerg√©tique mondiale.
        <br>
        P√©riodes de hausse rapide : Certaines p√©riodes montrent des hausses plus brusques, li√©es √† l'expansion industrielle, au d√©veloppement √©conomique rapide des pays, et √† l'utilisation accumul√©e des combustibles fossiles.
        <br>
        Changements d'utilisation des terres : L'inclusion des changements d'utilisation des terres (comme la d√©forestation) dans ces donn√©es montre l'impact significatif des pratiques agricoles et foresti√®res sur les √©missions totales.
        <br>
        Ces r√©sultats mettent en √©vidence la contribution humaine croissante aux √©missions de CO‚ÇÇ et soulignent l'importance de strat√©gies d'att√©nuation pour g√©rer et r√©duire ces √©missions √† l'√©chelle mondiale.
        </p>
        """,
        unsafe_allow_html=True)

    if show_all or st.checkbox("√âmissions mondiales de CO¬≤ par source (√† partir de 1900)"):
        df4_world = df4[df4['country'] == 'World']
        columns_of_interest = ['year', 'cement_co2', 'coal_co2', 'flaring_co2', 'gas_co2', 
                            'land_use_change_co2', 'oil_co2', 'other_industry_co2']
        rename_dict = {
            'year': 'Ann√©e', 
            'cement_co2': 'CO2 Ciment', 
            'coal_co2': 'CO2 Charbon', 
            'flaring_co2': 'CO2 Torchage', 
            'gas_co2': 'CO2 Gaz', 
            'land_use_change_co2': 'CO2 Changement d\'utilisation des terres', 
            'oil_co2': 'CO2 P√©trole', 
            'other_industry_co2': 'CO2 Autres Industries'
        }
        df4_world = df4_world[columns_of_interest].rename(columns=rename_dict)
        df4_detail_1900 = df4_world[df4_world['Ann√©e'] >= 1900]
        renamed_columns = list(rename_dict.values())[1:]  # Exclure 'Ann√©e'
        plt.figure(figsize=(8, 4))
        for column in renamed_columns:
            plt.plot(df4_detail_1900['Ann√©e'], df4_detail_1900[column], marker='.', linestyle='-', label=column)
        plt.title('√âmissions mondiales de CO¬≤ par source (√† partir de 1900)')
        plt.xlabel('Ann√©e')
        plt.ylabel('√âmissions de CO¬≤ (Gt)')
        plt.legend(loc='best')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown("""
        <p class="justified-text">
        Cette analyse souligne les changements majeurs dans les sources d'√©mission au 20√®me si√®cle, avec un passage progressif du charbon vers le p√©trole et le gaz naturel, tout en mettant en lumi√®re la diversification des sources industrielles de CO‚ÇÇ. La prise en compte de ces divers facteurs est essentielle pour une strat√©gie de r√©duction des √©missions efficace.
        </p>
        """, unsafe_allow_html=True)

    if show_all or st.checkbox("√âvolution de la population mondiale par ann√©e"):
        df4_pop = df4[df4['country'] == 'World']
        df4_pop['population'] = df4_pop['population'] / 1000000000
        plt.figure(figsize=(8, 4))
        plt.plot(df4_pop['year'], df4_pop['population'], marker='.', linestyle='-', color='blue')
        plt.title('√âvolution de la population mondiale par ann√©e')
        plt.xlabel('Ann√©e')
        plt.ylabel('Population mondiale (en miliards)')
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
            """
            <p class="justified-text">
            Le graphique montre une augmentation rapide de la population mondiale √† partir du 20√®me si√®cle :
            </p>
            <div style="margin-left: 30px;">
                <p class="justified-text">Stabilit√© relative avant le 19√®me si√®cle : La population mondiale √©tait relativement stable jusqu'√† la fin du 19√®me si√®cle, avec une l√©g√®re croissance r√©guli√®re.</p>
                <p class="justified-text">Croissance rapide au 20√®me si√®cle : Une augmentation significative se produit au cours du 20√®me si√®cle, avec des taux de croissance plus √©lev√©s apr√®s la Seconde Guerre mondiale. Cette p√©riode marque l'am√©lioration des soins de sant√©, une diminution de la mortalit√© infantile et une augmentation de la long√©vit√©.</p>
                <p class="justified-text">Tendance vers la surpopulation : La courbe indique une tendance vers une population mondiale qui d√©passe les 8 milliards au 21√®me si√®cle, mettant en √©vidence les d√©fis li√©s √† la gestion des ressources, du climat et des infrastructures pour soutenir la croissance.</p>
            </div>
            <p class="justified-text">
            Cette tendance √† la croissance rapide montre l‚Äôimpact humain croissant sur la plan√®te et souligne l‚Äôimportance des strat√©gies de d√©veloppement durable pour r√©pondre aux d√©fis d√©mographiques.
            </p>
            """,
            unsafe_allow_html=True)

    if show_all or st.checkbox("Corr√©lation entre population et √©mission de CO¬≤"):
        world_data2 = df4[df4['country'] == 'World']
        world_data2['population'] = world_data2['population'] / 1000000000
        fig, ax1 = plt.subplots(figsize=(8, 4))
        ax1.plot(world_data2['year'], world_data2['population'], marker='.', linestyle='-', color='blue', label='Population')
        ax1.set_xlabel('Ann√©e')
        ax1.set_ylabel('Population mondiale', color='blue')
        ax1.tick_params(axis='y', labelcolor='blue')
        ax2 = ax1.twinx()
        ax2.plot(world_data2['year'], world_data2['co2_including_luc'], marker='.', linestyle='-', color='red', label='CO¬≤ (y compris LUC)')
        ax2.set_ylabel('√âmissions de CO¬≤ (Gt)', color='red')
        ax2.tick_params(axis='y', labelcolor='red')
        plt.title('√âvolution de la population mondiale & des √©missions de CO¬≤ (y compris LUC)')
        ax1.grid(True)
        fig.tight_layout()
        fig.legend(loc='upper left', bbox_to_anchor=(0.1,0.9), bbox_transform=ax1.transAxes)
        plt.grid(True)
        st.pyplot(plt)
        st.markdown(
        """
        <p class="justified-text">
        La courbe montre une augmentation parall√®le de la population mondiale et des √©missions de CO‚ÇÇ. Cela indique que la croissance d√©mographique et l'augmentation des √©missions de CO‚ÇÇ sont intimement li√©es.
        <br>
        L'industrialisation et l'urbanisation, surtout √† partir du 20√®me si√®cle, semblent avoir contribu√© √† la fois √† l'augmentation rapide de la population et √† la croissance des √©missions.
        <br>
        Apr√®s 1950, il y a une acc√©l√©ration marqu√©e de la croissance de la population, accompagn√©e d'une augmentation rapide des √©missions de CO‚ÇÇ. Cela correspond √† la p√©riode de forte industrialisation mondiale et d'expansion des √©nergies fossiles.
        <br>
        Cette analyse met en √©vidence la relation √©troite entre la croissance d√©mographique et les √©missions de CO‚ÇÇ. Les d√©fis environnementaux li√©s aux √©missions de gaz √† effet de serre ne peuvent √™tre s√©par√©s des dynamiques d√©mographiques
        </p>
        """,
        unsafe_allow_html=True)

# PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3 *** PAGE 3  *** PAGE 3
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[3]:

    st.write("## Pr√©paration des donn√©es")

    
    st.markdown(
        """
        <div style="text-align: justify;">
            Afin de pr√©parer notre travail de mod√©lisation, 3 fichiers sont retenus.
            <br><br>
            1- Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">Zonal annual means.csv</span> et dont seules les colonnes Year, Glob, NHem, SHem sont conserv√©es et renomm√©es respectivement Ann√©e, Var. Temp., H√©m. Nord et H√©m. Sud.
            <br><br>
            2- Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">global-gdp-over-the-long-run.csv</span> et dont seules les colonnes Year et GDP sont conserv√©es et renomm√©es respectivement Ann√©e et PIB (Md). A cela s'ajoute :
                <br>
                <span style="margin-left:20px; display: inline-block;">
                    ‚úî Division des valeurs de la colonne PIB (Md) par 10^9 pour les exprimer en milliard (Md).
                    <br>
                    ‚úî Arrondi de la colonne PIB √† 0 chiffres apr√®s la virgule.
                    <br>
                    ‚úî Ajout des ann√©es 1820 √† 1823.
                    <br>
                    ‚úî Interpolation lin√©aire pour les valeurs manquantes de PIB.
                </span>
            <br><br>
            3- Le fichier <span style="color: blue; font-style: italic; text-decoration: underline;">owid-co2-data.csv</span> est scind√© en 2 fichiers : 1 contenant les donn√©es de la zone monde pour les d√©tails des √©missions de CO¬≤ par source et 1 contenant les donn√©es de la zone monde pour les colonnes Population et Total CO¬≤.
                <span style="margin-left:20px; display: inline-block;">
                    <br>
                    üìÅ Zone monde pour les d√©tails des √©missions de CO¬≤ par source
                    <br>
                    <span style="margin-left:20px; display: inline-block;">
                        ‚úî On ne conserve que les colonnes year, population, cement_co2, coal_co2, flaring_co2, gas_co2, land_use_change_co2, oil_co2, other_industry_co2, co2_including_luc renomm√©es respectivements Ann√©e, Population (m), Ciment, Charbon, Torchage, Gaz, Usage des sols, P√©trole, Industrie et Total CO¬≤ (GT).
                        <br>
                        ‚úî On ne garde que les ann√©es > 1880.
                        <br>
                        ‚úî Division des valeurs de Population par 10^6 pour les exprimer en millions.
                    </span>
                    <br>
                    <br>
                    üìÅ Zone monde pour les √©missions de CO¬≤
                    <br>
                    <span style="margin-left:20px; display: inline-block;">
                        ‚úî On ne conserve que les colonnes year, population et co2_including_luc renomm√©es respectivements Ann√©e, Population (m) etTotal CO¬≤ (GT).
                        <br>
                        ‚úî On ne garde que les ann√©es > 1880.
                        <br>
                        ‚úî Division des valeurs de Population par 10^6 pour les exprimer en millions.
                    </span>
                    <br><br>
                </span>
                    4- Choix retenu concernant les Variations de temp√©ratures et hypoth√®se de travail.
                    <br><br>
                    Comme l'indique le graphique ci-dessous, les donn√©es de temp√©rature du fichier Zonal annual means.csv ressemble plus √† des donn√©es constat√©es plut√¥t qu'√† des donn√©es issues d'une r√©gression (owid-co2-data.csv). C'est pour cette raison que ces donn√©es serviront de base de travail.
                    <br><br>
                    Compte tenu de l'absence de donn√©es concernant les √©missions de m√©thane (CH4) et de protoxyde d‚Äôazote (N¬≤O) avant 1990, l'hypoth√®se de travail ne retiendra que le CO¬≤.<br><br>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Chargement des fichiers CSV
    df_co2 = load_csv('owid-co2-data.csv', header=0)
    df_zonal = load_csv('Zonal annual means.csv', header=0)

    # Filtrer pour ne garder que les donn√©es o√π 'country' est "World"
    df_co2 = df_co2[df_co2['country'] == 'World']

    # Renommer la colonne 'year' en 'Year' dans df_co2
    df_co2 = df_co2.rename(columns={'year': 'Year'})

    # Extraction des colonnes n√©cessaires
    df_co2 = df_co2[['Year', 'temperature_change_from_co2']]
    df_zonal = df_zonal[['Year', 'Glob']]

    # Filtrer les ann√©es de 1850 √† 2023 dans chaque DataFrame
    df_co2 = df_co2[(df_co2['Year'] >= 1850) & (df_co2['Year'] <= 2023)]
    df_zonal = df_zonal[(df_zonal['Year'] >= 1850) & (df_zonal['Year'] <= 2023)]

    # Fusion des deux DataFrames sur la colonne 'Year'
    df_merged = pd.merge(df_co2, df_zonal, on='Year')

    # Suppression des doublons √©ventuels de l'ann√©e 'Year'
    df_merged = df_merged.drop_duplicates(subset='Year')

    # Ajout de la colonne pour la diff√©rence entre 'temperature_change_from_co2' et 'Glob'
    df_merged['difference'] = df_merged['temperature_change_from_co2'] - df_merged['Glob']

    # Filtrer pour ne garder que les ann√©es √† partir de 1900
    df_merged = df_merged[df_merged['Year'] >= 1900]

    # Trac√© du graphique
    plt.figure(figsize=(12, 6))
    plt.plot(df_merged['Year'], df_merged['temperature_change_from_co2'], label='owid-co2-data.csv')
    plt.plot(df_merged['Year'], df_merged['Glob'], label='Zonal annual means.csv')
    

    # Ajouter les labels et le titre
    plt.xlabel('Ann√©e')
    plt.ylabel('Variation de temp√©rature')
    plt.title('Variation de temp√©rature due au CO2 et autres facteurs (1900-2023)')
    plt.legend()

    # Afficher le graphique
    st.pyplot(plt)
   
# PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4 *** PAGE 4  *** PAGE 4
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[4]:

# Lire le fichier

    st.write("## Dataset final & DataVizualization")
    st.markdown(
        """
        Apr√®s fusion sur l'ann√©e des 3 fichiers cit√©s pr√©c√©demment et ajout des donn√©es pour l'ann√©e 2023, le fichier de travail se pr√©sente comme suit :
        """,
        unsafe_allow_html=True)
    # Cr√©e des boutons radio pour s√©lectionner l'option d'affichage
    option = st.selectbox(
        "",
        ("Aucune s√©lection", "En-t√™te du data", "Fin du data", "Informations", "Valeurs manquantes", "Doublons")
    )
    if option == "Aucune s√©lection":
        st.write(f"")
    
    # Affiche le contenu en fonction de l'option s√©lectionn√©e
    elif option == "En-t√™te du data":
        final_df = load_csv('final_df.csv', header=0)
        styled_df = final_df.head().style.format({
            final_df.columns[0]: "{:.0f}",
            final_df.columns[1]: "{:.2f}",
            final_df.columns[2]: "{:.2f}",
            final_df.columns[3]: "{:.2f}",
            final_df.columns[4]: "{:.0f}",
            final_df.columns[5]: "{:.0f}",
            final_df.columns[6]: "{:.0f}",
        })
        st.dataframe(styled_df)

    elif option == "Fin du data":
        final_df = load_csv('final_df.csv', header=0)
        styled_df = final_df.tail().style.format({
            final_df.columns[0]: "{:.0f}",
            final_df.columns[1]: "{:.2f}",
            final_df.columns[2]: "{:.2f}",
            final_df.columns[3]: "{:.2f}",
            final_df.columns[4]: "{:.0f}",
            final_df.columns[5]: "{:.0f}",
            final_df.columns[6]: "{:.0f}",
        })
        st.dataframe(styled_df)

    elif option == "Informations":
        final_df = load_csv('final_df.csv', header=0)
        df_info = pd.DataFrame({
            "Type de donn√©es": final_df.dtypes,
            "Nombre de non nuls": final_df.count(),
            "Pourcentage de non nuls (%)": ((final_df.count() / len(final_df)) * 100).round(2),  # Pourcentage arrondi √† 2 chiffres
            "Nombre de valeurs uniques": final_df.nunique()
        })
        
        st.table(df_info)
        
        rows, cols = final_df.shape
        st.write(f"Le dataframe contient {rows} lignes et {cols} colonnes.")

    elif option == "Valeurs manquantes":
        final_df = load_csv('final_df.csv', header=0)
        manquantes = final_df.isna().sum().to_frame().T
        st.dataframe(manquantes)

    elif option == "Doublons":
        final_df = load_csv('final_df.csv', header=0)
        num_duplicates = final_df.duplicated().sum()
        st.write(f"Le nombre de doublons est de : {num_duplicates}")

    st.markdown(
        """
        <span style="color: blue; font-weight: bold; text-decoration: underline;">Observations</span><br>
            <p class="justified-text">
            Le graphique ci-apr√®s indique une absence de saisonnalit√©, et √† partir des ann√©es 80 une corr√©lation multiple qui se dessine. Ainsi depuis 1900, la population et les √©missions de CO¬≤ sont √©troitement corr√©l√©es, et il semble que le PIB et les √©missions de CO¬≤ amorcent une corr√©lation √† compter des ann√©es 1980.
            </p>
        
        Les variables √©tant indiqu√©es fil du temps, c‚Äôest donc une s√©rie temporelle.
        """,
        unsafe_allow_html=True)

    final_df = load_csv('final_df.csv', header=0)
    # Filtrage des donn√©es pour ne prendre en compte que celles √† partir de l'ann√©e 1900
    filtered_final_df = final_df[final_df['Ann√©e'] >= 1900]

    # Cr√©ation d'un graphique unique pour toutes les donn√©es demand√©es
    fig, ax = plt.subplots(figsize=(8, 5))  # D√©finition de la taille du graphique

    # Trac√© de la courbe pour la variation de temp√©rature globale
    ax.plot(final_df['Ann√©e'], final_df['Var. Temp.'], marker='.', linestyle='-',
            label='Variation Temp√©rature Globale', color='green')

    # Trac√© de la courbe pour le PIB mondial
    ax.plot(final_df['Ann√©e'], final_df['PIB (Md)'], marker='.', linestyle='-',
            label='PIB (Md)', color='blue')

    # Trac√© de la courbe pour la population mondiale
    ax.plot(final_df['Ann√©e'], final_df['Population (m)'], marker='.', linestyle='--',
            label='Population (m)', color='purple')

    # Trac√© de la courbe pour les √©missions totales de CO2
    ax.plot(final_df['Ann√©e'], final_df['Total CO2 (mT)'], marker='.', linestyle='-.',
            label='Total CO2 (mT)', color='red')

    # Ajout du titre et des √©tiquettes des axes
    ax.set_title('√âvolution des Donn√©es Globales (depuis 1900)')  # Titre du graphique
    ax.set_xlabel('Ann√©e')  # √âtiquette pour l'axe des abscisses (x)
    ax.set_ylabel('Valeurs')  # √âtiquette pour l'axe des ordonn√©es (y)
    ax.grid(True)  # Activation de la grille pour une meilleure lecture des donn√©es

    # Ajout d'une l√©gende pour distinguer les diff√©rentes courbes
    ax.legend(loc = 'center right')
    # 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'

    # Application d'une √©chelle logarithmique √† l'axe des ordonn√©es pour mieux g√©rer les diff√©rences de grandeur
    ax.set_yscale('log')

    # Ajustement de la mise en page pour √©viter tout chevauchement
    plt.tight_layout()

    # Affichage du graphique final
    st.pyplot(plt)

    st.markdown(
        """
        <span style="color: blue; font-weight: bold; text-decoration: underline;">Matrice de corr√©lation</span><br>
            """,
        unsafe_allow_html=True
    )

    correlation_matrix = final_df.corr()
    # Visualisation de la matrice de corr√©lation
    plt.figure(figsize=(6, 4))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
    plt.title('Matrice de corr√©lation des variables (Fichier Modifi√©)')
    plt.xticks(rotation=45, ha="right")
    st.pyplot(plt)
    
    st.markdown(
        """
        L‚Äôanalyse de la matrice de corr√©lation montre que :
            <br><br>
            <span style="margin-left:20px; display: inline-block;">
                <p class="justified-text">
                <span style="font-weight: bold; text-decoration: underline;">Var. Temp. (Variable cible)</span> :
                Corr√©lation forte avec le PIB (0.94) : Cela montre une relation positive importante, indiquant que les augmentations du PIB sont fortement associ√©es aux variations de la temp√©rature. Corr√©lation forte avec la Population (0.94) : La croissance de la population mondiale est √©troitement li√©e aux variations de temp√©rature, ce qui peut √™tre li√© √† des impacts environnementaux plus larges.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">CO¬≤ total</span> : Corr√©lation tr√®s forte avec la Population (0.997) : Cela indique que l‚Äôaugmentation de la population est un facteur majeur des √©missions de CO¬≤. Corr√©lation tr√®s forte avec le PIB (0,96) : L‚Äôaugmentation √©conomique s‚Äôaccompagne souvent d‚Äôune augmentation des √©missions de CO¬≤, probablement due √† une intensification de l‚Äôindustrialisation.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">Ann√©e</span> : Corr√©lation √©lev√©e avec le Var. Temp. (0.87), Population (0.94) , et Total CO¬≤ (0.95) : Cela indique que sur la p√©riode √©tudi√©e, la population, les √©missions de CO¬≤, et la temp√©rature ont toutes montr√© une augmentation continue au fil du temps.
                <br><br>
                </p>
            </span>
            <p class="justified-text">
            Les corr√©lations fortes observ√©es montrent des relations √©troites entre l‚Äô√©volution √©conomique, d√©mographique et environnementale, avec des impacts directs sur les variations de temp√©rature.
            </p>
        <br><br>
        <span style="color: blue; font-weight: bold; text-decoration: underline;">M√©triques</span><br>
            """,
        unsafe_allow_html=True
    )

    # Extraire les colonnes pertinentes
    years = final_df['Ann√©e']
    population = final_df['Population (m)']
    pib = final_df['PIB (Md)']
    co2 = final_df['Total CO2 (mT)']
    glob = final_df['Var. Temp.']

    # Cr√©er une figure avec une disposition 2x2
    plt.figure(figsize=(10, 8))

    # Tracer l'√©volution de la population par ann√©e (Graphique 1)
    plt.subplot(2, 2, 1)
    plt.plot(years, population, label='Population (Md)')
    plt.title('Evolution de la population par ann√©e')
    # plt.xlabel('Ann√©e')
    plt.ylabel('Population (en milliards)')
    plt.grid(True)
    plt.legend()

    # Tracer l'√©volution du PIB par ann√©e (Graphique 2)
    plt.subplot(2, 2, 2)
    plt.plot(years, pib, label='PIB (Md)', color='orange')
    plt.title('Evolution du PIB par ann√©e')
    # plt.xlabel('Ann√©e')
    plt.ylabel('PIB (en milliards de dollars)')
    plt.grid(True)
    plt.legend()

    # Tracer l'√©volution des √©missions de CO2 par ann√©e (Graphique 3)
    plt.subplot(2, 2, 3)
    plt.plot(years, co2, label='CO2 (MdT)', color='green')
    plt.title('Evolution des √©missions de CO2 par ann√©e')
    # plt.xlabel('Ann√©e')
    plt.ylabel('CO2 (en milliards de tonnes)')
    plt.grid(True)
    plt.legend()

    # Tracer l'√©volution des variations de temp√©ratures (Graphique 4)
    plt.subplot(2, 2, 4)
    plt.plot(years, glob, label='Temp√©rature globale', color='red')
    plt.title('Changement de la temp√©rature moyenne mondiale')
    # plt.xlabel('Ann√©e')
    plt.ylabel('Variation de temp√©rature (¬∞C)')
    plt.grid(True)
    plt.legend()

    # Ajuster l'espacement entre les sous-graphiques
    plt.tight_layout()

    # Afficher la figure
    st.pyplot(plt)

    st.markdown(
        """
        Les tendances temporelles montrent que :
            <br><br>
            <span style="margin-left:20px; display: inline-block;">
                <p class="justified-text">
                <span style="font-weight: bold; text-decoration: underline;">Variation de Temp√©rature</span> : Une augmentation progressive, surtout marqu√©e √† partir du milieu du 20√®me si√®cle.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">√âmissions de CO¬≤</span> : Une augmentation continue, surtout apr√®s les ann√©es 1950.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">Population mondiale</span> : Une forte croissance, surtout au cours du 20√®me si√®cle.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">PIB mondial</span> : Une mont√©e rapide, en particulier dans la seconde moiti√© du 20√®me si√®cle, d√©montrant une croissance √©conomique mondiale soutenue.
                </p>
            </span>
        <br><br>
        <span style="color: blue; font-weight: bold; text-decoration: underline;">Analyse visuelle</span><br>
            """,
        unsafe_allow_html=True
    )

    # Analyse des corr√©lations visuelles entre la variable cible et les pr√©dicteurs
    plt.figure(figsize=(9, 6))

    # Relation entre Var. Temp. et PIB
    plt.subplot(2, 2, 1)
    sns.scatterplot(x=final_df['PIB (Md)']/1000, y=final_df['Var. Temp.'], color='green')
    plt.title('Relation Var. Temp√©rature / PIB')
    plt.xlabel('PIB (trilliards)')
    plt.ylabel('Variation Temp√©rature (¬∞C)')

    # Relation entre Var. Temp. et Population
    plt.subplot(2, 2, 2)
    sns.scatterplot(x=final_df['Population (m)']/1000, y=final_df['Var. Temp.'], color='orange')
    plt.title('Relation Var. Temp√©rature / Population')
    plt.xlabel('Population (En milliards)')
    plt.ylabel('Variation Temp√©rature (¬∞C)')

    # Relation entre Var. Temp. et Total CO2
    plt.subplot(2, 2, 3)
    sns.scatterplot(x=final_df['Total CO2 (mT)']/1000, y=final_df['Var. Temp.'], color='red')
    plt.title('Relation Var. Temp√©rature / √âmissions de CO¬≤')
    plt.xlabel('Total CO¬≤ (milliards de tonnes)')
    plt.ylabel('Variation Temp√©rature (¬∞C)')

    plt.tight_layout()
    st.pyplot(plt)

    st.markdown(
        """
        Les tendances temporelles montrent que :
            <br><br>
            <span style="margin-left:20px; display: inline-block;">
                <p class="justified-text">
                <span style="font-weight: bold; text-decoration: underline;">Variation de Temp√©rature vs PIB</span> : Une relation positive claire : √† mesure que le PIB augmente, la variation de temp√©rature tend √† augmenter. Cela indique que la croissance √©conomique est associ√©e √† des variations de temp√©rature plus √©lev√©es.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">Variation de Temp√©rature vs Population</span> : Relation positive similaire : une augmentation de la population est li√©e √† une augmentation des variations de temp√©rature, probablement en raison d‚Äôune demande accumul√©e en ressources et des impacts environnementaux associ√©s.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">Variation de Temp√©rature vs √âmissions de CO¬≤ </span> : La relation positive est √©vidente : des niveaux plus √©lev√©s d‚Äô√©missions de CO¬≤ correspondant √† des augmentations plus importantes de la temp√©rature, ce qui renforce l‚Äôhypoth√®se d‚Äôun lien entre les √©missions de gaz √† effet de serre et le r√©chauffement climatique.
                </p>
            </span>
        <br><br>
        <span style="color: blue; font-weight: bold; text-decoration: underline;">M√©triques de performance</span><br>
        """,
        unsafe_allow_html=True)

    # Ex√©cution du mod√®le
    X = final_df[['PIB (Md)', 'Population (m)', 'Total CO2 (mT)']]
    y = final_df['Var. Temp.']

    model = LinearRegression()
    model.fit(X, y)

    y_pred = model.predict(X)

    # Calcul des m√©triques de performance
    mse = mean_squared_error(y, y_pred)
    mae = mean_absolute_error(y, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y, y_pred)

    # R√©sum√© des m√©triques de performance
    performance_metrics = {
        'Mean Absolute Error (MAE)': mae,
        'Mean Squared Error (MSE)': mse,
        'Root Mean Squared Error (RMSE)': rmse,
        'R¬≤ (Coefficient de d√©termination)': r2
    }

    # Transformer en DataFrame pour un affichage propre
    performance_df = pd.DataFrame(performance_metrics.items(), columns=["M√©trique", "Valeur"])
    performance_df['Valeur'] = performance_df['Valeur'].map("{:.3f}".format)  # Formatage pour trois d√©cimales

    # Afficher avec Streamlit
    st.table(performance_df)

    st.markdown(
        """
        Les m√©triques de performance du mod√®le de r√©gression lin√©aire sont :
            <br><br>
            <span style="margin-left:20px; display: inline-block;">
                <p class="justified-text">
                <span style="font-weight: bold; text-decoration: underline;">MAE</span> : 0.095, indiquant une erreur moyenne absolue d‚Äôenviron 0.095¬∞C entre les pr√©dictions et les valeurs r√©elles.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">MSE</span> : 0.014, ce qui repr√©sente la moyenne des erreurs quadratiques. Plus cette valeur est proche de z√©ro, mieux le mod√®le est ajust√©.
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">RMSE</span> : 0.116, ce qui donne une id√©e de la taille des erreurs en utilisant la m√™me unit√© que la variable cible (degr√©s Celsius).
                <br><br>
                <span style="font-weight: bold; text-decoration: underline;">R¬≤</span> : 0.906, indiquant que le mod√®le explique environ 90,6% de la variance des donn√©es.
                </p>
            </span>
            
        """,
        unsafe_allow_html=True)


# PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5 *** PAGE 5  *** PAGE 5
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[5]:

    st.write("## Mod√©lisations")

    data = load_csv('final_df10.csv', header=0)

    # Description
    st.write("""
        S√©lectionnez les variables explicatives (y compris l'ann√©e) et l'ann√©e de d√©part 
        pour entra√Æner un mod√®le de r√©gression pour pr√©dire 'Var. Temp.' en utilisant diff√©rents types de r√©gression.
    """)

    # Liste des variables explicatives sans le PIB
    variables_disponibles = [col for col in data.columns if col not in ['PIB (Md)', 'Var. Temp.']]
    variables_choisies = st.multiselect("Choisissez les variables explicatives :", variables_disponibles, format_func=lambda x: x)

    # S√©lecteur d'ann√©e de d√©part
    annee_min, annee_max = data['Ann√©e'].min(), data['Ann√©e'].max()
    annee_depart = st.slider("S√©lectionnez l'ann√©e de d√©part :", int(annee_min), int(annee_max), int(annee_min))

    # Menu de s√©lection du type de r√©gression
    modele_selectionne = st.selectbox("S√©lectionnez le mod√®le de r√©gression :", 
                                    ["R√©gression Lin√©aire", "Lasso", "Ridge", "R√©gression Polynomiale", "For√™t Al√©atoire"])

    # Filtrer les donn√©es en fonction de l'ann√©e de d√©part
    data_filtre = data[data['Ann√©e'] >= annee_depart]

    # V√©rifier si des variables explicatives ont √©t√© choisies
    if variables_choisies:
        # Pr√©paration des donn√©es
        X = data_filtre[variables_choisies]
        y = data_filtre['Var. Temp.']
        
        # Division des donn√©es en ensembles d'entra√Ænement et de test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # S√©lection du mod√®le de r√©gression
        if modele_selectionne == "R√©gression Lin√©aire":
            modele = LinearRegression()
        elif modele_selectionne == "Lasso":
            modele = Lasso(alpha=0.1)
        elif modele_selectionne == "Ridge":
            modele = Ridge(alpha=1.0)
        elif modele_selectionne == "R√©gression Polynomiale":
            # Pipeline pour la r√©gression polynomiale
            modele = Pipeline([('poly', PolynomialFeatures(degree=2)), ('linear', LinearRegression())])
        elif modele_selectionne == "For√™t Al√©atoire":
            modele = RandomForestRegressor(n_estimators=100, random_state=42)
        
        # Entra√Ænement du mod√®le
        modele.fit(X_train, y_train)
        
        # Pr√©dictions et √©valuation du mod√®le
        y_pred = modele.predict(X_test)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        
        st.write(f"**Performance du mod√®le ({modele_selectionne}) :**")
        st.write(f"Mean Squared Error (MSE) : {mse:.2f}")
        st.write(f"R¬≤ Score : {r2:.2f}")
        
        # Affichage des coefficients pour les mod√®les lin√©aires
        if modele_selectionne in ["R√©gression Lin√©aire", "Lasso", "Ridge"]:
            st.write("**Coefficients des variables explicatives :**")
            coeff_df = pd.DataFrame({'Variable': variables_choisies, 'Coefficient': modele.coef_})
            st.dataframe(coeff_df)

        # Affichage des pr√©dictions par rapport aux ann√©es avec matplotlib
        X_test['Ann√©e'] = data_filtre.loc[X_test.index, 'Ann√©e']
        result_df = pd.DataFrame({
            'Ann√©e': X_test['Ann√©e'],
            'Valeurs R√©elles': y_test,
            'Pr√©dictions': y_pred
        }).sort_values(by='Ann√©e')

        # Cr√©ation du graphique avec matplotlib
        plt.figure(figsize=(12, 6))
        plt.plot(result_df['Ann√©e'], result_df['Valeurs R√©elles'], label='Valeurs R√©elles', color='lightblue', linewidth=2)
        plt.plot(result_df['Ann√©e'], result_df['Pr√©dictions'], label='Pr√©dictions', color='blue', linewidth=2)
        plt.xlabel("Ann√©e")
        plt.ylabel("Temp√©rature")
        plt.title(f"Comparaison des Pr√©dictions et des Valeurs R√©elles par Ann√©e ({modele_selectionne})")
        plt.legend()

        # Espacer les √©tiquettes de l'axe des ann√©es et afficher une ann√©e sur cinq, en commen√ßant par l'ann√©e de d√©part
        annees_affichees = np.arange(annee_depart, annee_max + 1, 5)
        plt.xticks(annees_affichees, rotation=45)

        # Supprimer le s√©parateur des milliers
        plt.gca().get_xaxis().get_major_formatter().set_useOffset(False)

        st.pyplot(plt)
    else:
        st.write("Veuillez choisir des variables explicatives pour entra√Æner le mod√®le.")


# PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6 *** PAGE 6  *** PAGE 6  *** PAGE 6 *** PAGE 6
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[6]:

    st.write("## Pr√©dictions")

    data = load_csv('final_df10.csv', header=0)

    # Description
    st.write("""
        S√©lectionnez les variables explicatives et l'ann√©e de d√©part pour entra√Æner un mod√®le de r√©gression 
        et visualiser les pr√©dictions de la variable 'Var. Temp.' sur le graphique, avec des projections jusqu'en 2100.
    """)

    # Liste des variables explicatives sans le PIB ni la variable cible
    variables_disponibles = [col for col in data.columns if col not in ['PIB (Md)', 'Var. Temp.']]
    variables_choisies = st.multiselect("Choisissez les variables explicatives :", variables_disponibles, format_func=lambda x: x)

    # S√©lecteur d'ann√©e de d√©part
    annee_min, annee_max = data['Ann√©e'].min(), data['Ann√©e'].max()
    annee_depart = st.slider("S√©lectionnez l'ann√©e de d√©part :", int(annee_min), int(annee_max), int(annee_min))

    # Menu de s√©lection du type de r√©gression
    modele_selectionne = st.selectbox("S√©lectionnez le mod√®le de r√©gression :", 
                                    ["R√©gression Lin√©aire", "Lasso", "Ridge", "R√©gression Polynomiale", "For√™t Al√©atoire"])

    # Filtrer les donn√©es en fonction de l'ann√©e de d√©part
    data_filtre = data[data['Ann√©e'] >= annee_depart]

    # V√©rifier si des variables explicatives ont √©t√© choisies
    if variables_choisies:
        # Pr√©paration des donn√©es
        X = data_filtre[variables_choisies]
        y = data_filtre['Var. Temp.']
        
        # Division des donn√©es en ensembles d'entra√Ænement et de test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # S√©lection du mod√®le de r√©gression
        if modele_selectionne == "R√©gression Lin√©aire":
            modele = LinearRegression()
        elif modele_selectionne == "Lasso":
            modele = Lasso(alpha=0.1)
        elif modele_selectionne == "Ridge":
            modele = Ridge(alpha=1.0)
        elif modele_selectionne == "R√©gression Polynomiale":
            # Pipeline pour la r√©gression polynomiale
            modele = Pipeline([('poly', PolynomialFeatures(degree=2)), ('linear', LinearRegression())])
        elif modele_selectionne == "For√™t Al√©atoire":
            modele = RandomForestRegressor(n_estimators=100, random_state=42)
        
        # Entra√Ænement du mod√®le
        modele.fit(X_train, y_train)
        
        # Pr√©dictions sur l'ensemble de test
        y_pred_test = modele.predict(X_test)
        
        # Pr√©dictions sur l'ensemble complet pour visualisation
        y_pred_all = modele.predict(X)
        
        # G√©n√©rer des ann√©es futures jusqu'en 2100
        annees_futures = pd.DataFrame({'Ann√©e': np.arange(annee_max + 1, 2101)})
        
        # Simuler des valeurs futures pour les variables explicatives
        for var in variables_choisies:
            if var != 'Ann√©e':
                # Projeter une tendance lin√©aire pour les variables num√©riques
                coef_tendance = (data_filtre[var].iloc[-1] - data_filtre[var].iloc[0]) / (data_filtre['Ann√©e'].iloc[-1] - data_filtre['Ann√©e'].iloc[0])
                annees_futures[var] = data_filtre[var].iloc[-1] + coef_tendance * (annees_futures['Ann√©e'] - data_filtre['Ann√©e'].iloc[-1])
        
        # Pr√©dictions sur les ann√©es futures
        y_pred_futures = modele.predict(annees_futures[variables_choisies])
        annees_futures['Pr√©dictions'] = y_pred_futures
        
        # √âvaluation du mod√®le
        mse = mean_squared_error(y_test, y_pred_test)
        r2 = r2_score(y_test, y_pred_test)
        
        st.write(f"**Performance du mod√®le ({modele_selectionne}) :**")
        st.write(f"Mean Squared Error (MSE) : {mse:.2f}")
        st.write(f"R¬≤ Score : {r2:.2f}")
        
        # Affichage des coefficients pour les mod√®les lin√©aires
        if modele_selectionne in ["R√©gression Lin√©aire", "Lasso", "Ridge"]:
            st.write("**Coefficients des variables explicatives :**")
            coeff_df = pd.DataFrame({'Variable': variables_choisies, 'Coefficient': modele.coef_})
            st.dataframe(coeff_df)

        # Sauvegarder les variables explicatives choisies
        with open('variables_explicatives.pkl', 'wb') as file:
            pickle.dump(variables_choisies, file)

        # Sauvegarder le mod√®le entra√Æn√©
        with open('modele_entraine.pkl', 'wb') as file:
            pickle.dump(modele, file)
        
        # Affichage des pr√©dictions par rapport aux ann√©es avec matplotlib
        data_filtre['Pr√©dictions'] = y_pred_all
        plt.figure(figsize=(14, 7))
        plt.plot(data_filtre['Ann√©e'], data_filtre['Var. Temp.'], label='Valeurs R√©elles', color='lightblue', linewidth=2)
        plt.plot(data_filtre['Ann√©e'], data_filtre['Pr√©dictions'], label='Pr√©dictions', color='blue', linewidth=2)
        plt.plot(annees_futures['Ann√©e'], annees_futures['Pr√©dictions'], label='Pr√©dictions Futures', color='red', linewidth=2, linestyle='--')
        plt.xlabel("Ann√©e")
        plt.ylabel("Temp√©rature")
        plt.title(f"Comparaison des Pr√©dictions et des Valeurs R√©elles par Ann√©e ({modele_selectionne})")
        plt.legend()

        # Espacer les √©tiquettes de l'axe des ann√©es et afficher une ann√©e sur cinq, en commen√ßant par l'ann√©e de d√©part
        annees_affichees = np.arange(annee_depart, 2101, 5)
        plt.xticks(annees_affichees, rotation=45)

        # Supprimer le s√©parateur des milliers
        plt.gca().get_xaxis().get_major_formatter().set_useOffset(False)

        st.pyplot(plt)
        
        # Courbes d'√©volution de la population et du CO2
        if 'Population (m)' in variables_choisies:
            plt.figure(figsize=(14, 5))
            plt.plot(data_filtre['Ann√©e'], data_filtre['Population (m)'], label='Population (m) R√©elle', color='green', linewidth=2)
            plt.plot(annees_futures['Ann√©e'], annees_futures['Population (m)'], label='Population (m) Projet√©e', color='darkgreen', linewidth=2, linestyle='--')
            plt.xlabel("Ann√©e")
            plt.ylabel("Population (m)")
            plt.title("√âvolution de la Population de l'Ann√©e S√©lectionn√©e √† 2100")
            plt.legend()
            st.pyplot(plt)

        if 'Total CO2 (mT)' in variables_choisies:
            plt.figure(figsize=(14, 5))
            plt.plot(data_filtre['Ann√©e'], data_filtre['Total CO2 (mT)'], label='Total CO2 (mT) R√©el', color='purple', linewidth=2)
            plt.plot(annees_futures['Ann√©e'], annees_futures['Total CO2 (mT)'], label='Total CO2 (mT) Projet√©', color='darkviolet', linewidth=2, linestyle='--')
            plt.xlabel("Ann√©e")
            plt.ylabel("Total CO2 (mT)")
            plt.title("√âvolution du CO2 de l'Ann√©e S√©lectionn√©e √† 2100")
            plt.legend()
            st.pyplot(plt)
    else:
        st.write("Veuillez choisir des variables explicatives pour entra√Æner le mod√®le.")


# PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7 *** PAGE 7  *** PAGE 7
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[7]:

    st.write("## Limites")

    st.markdown(
        """
        <div style="text-align: justify;">
            Il existe plusieurs limites √† ces pr√©dictions, et pour n'en citer que 3 :
            <br><br>
            1- Selon <a href="https://population.un.org/wpp/Download/Standard/MostUsed/" style="color: blue;">l'ONU</a> les projections de population mondiale ne peuvent exc√©der 10 milliards 291 millions d'individus, et le pic sera atteint en 2084.
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )

        # Charger les donn√©es ONU depuis votre fichier CSV
    onu_population = load_csv('onu_population.csv', sep=';', encoding='ISO-8859-1')

    # Calcul du total de la population par ann√©e
    total_population_by_year = onu_population.groupby('Ann√©e')['Population'].sum()

    # Cr√©ation du graphique pour le total par ann√©e avec annotations √† c√¥t√©, sans la premi√®re ann√©e
    plt.figure(figsize=(6, 3))
    plt.plot(total_population_by_year.index, total_population_by_year, marker=' ', linewidth=1, color='green')

    # Personnalisation du graphique
    plt.title('√âvolution de la Population mondiale de 2024 √† 2100', fontsize=12)
    plt.ylabel('Total Population (millions)', fontsize=10)
    plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)

    # Annotation du nombre tous les 20 ans, y compris la derni√®re ann√©e, sans la premi√®re valeur
    for year in list(range(2044, 2101, 20)) + [2100]:  # Commence √† 2044 pour exclure 2024
        population = total_population_by_year[year]
        plt.text(year, population - 250, f'{population:,.0f}', fontsize=10, ha='center', va='bottom', color='blue')

    # Ajustement du layout
    plt.tight_layout()
    st.pyplot(plt)

    st.markdown(
        """
        <div style="text-align: justify;">
            <br><br>
            2- Selon <a href="https://fr.statista.com/statistiques/559789/reserves-mondiales-de-petrole-brut-1990/#:~:text=En%202023%2C%20les%20r%C3%A9serves%20mondiales,de%201.569%20milliards%20de%20barils." style="color: blue;">statista</a> les r√©serves mondiales de p√©trole sont 1570 milliards de barils.
            Avec une consommation actuelle de 100 millions de barils / jour, il reste environ 40 ans de stocks, √† consommation fixe. En th√©orie, car les producteurs n'exporteront plus bien avant.<br>
            Selon <a href="https://www.planete-energies.com/fr/media/chiffres/consommation-mondiale-gaz-naturel." style="color: blue;">Plan√®te √©nergie (Total √©nergie)</a> les r√©serves mondiales de Gaz sont 188.000 milliards de m3.
            Avec une consommation actuelle de 3940 milliards de m3 / an, il reste environ 47 ans de stocks, √† consommation fixe. En th√©orie, car les producteurs n'exporteront plus bien avant.
            En en pr√©cisant que la Russie et l'Iran poss√®dent √† elles deux 37% des r√©serves mondiales.<br>
            Toujours selon <a href="https://www.planete-energies.com/fr/media/chiffres/reserves-mondiales-charbon" style="color: blue;">Plan√®te √©nergie (Total √©nergie)</a> les r√©serves mondiales de charbon couvrent 200 ans de consommation actuelle. √âtant pr√©cis√© que ces 5 pays : Etats-Unis, Russie, Australie, Chine et Inde poss√®dent 76% des r√©serves mondiales.
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )

        # Charger les donn√©es ONU depuis votre fichier CSV
#    df4 = load_csv('df4.csv')
#
    # Restreindre les donn√©es aux colonnes d'int√©r√™t et aux ann√©es 1950 √† 2022
#   df_filtered = df4[(df4['Ann√©e'] >= 1950) & (df4['Ann√©e'] <= 2022)]
#    variables = ['Charbon', 'Gaz', 'P√©trole']
#
    # Cr√©er un mod√®le de r√©gression lin√©aire pour chaque variable
#   predictions = {}
#    future_years = np.arange(2023, 2101).reshape(-1, 1)

#    for var in variables:
#        df_var = df_filtered[['Ann√©e', var]].dropna()
#        X = df_var['Ann√©e'].values.reshape(-1, 1)
#        y = df_var[var].values
#        model = LinearRegression()
#        model.fit(X, y)
#        predictions[var] = model.predict(future_years)

    # Tracer les donn√©es historiques et les pr√©dictions
#    plt.figure(figsize=(14, 8))

#    couleurs = ['b', 'g', 'r', 'c', 'm', 'y', 'k']  # Couleurs pour chaque variable

#    for i, var in enumerate(variables):
#        couleur = couleurs[i % len(couleurs)]  # Associer une couleur unique par variable
        # Tracer les donn√©es historiques
#        plt.plot(df_filtered['Ann√©e'], df_filtered[var], label=f"{var} (historique)", color=couleur, linewidth=2)
        # Tracer les pr√©dictions avec la m√™me couleur
#        plt.plot(future_years, predictions[var], linestyle='--', color=couleur, label=f"{var} (pr√©diction)", linewidth=1)

    # Modifier la l√©gende
#    plt.xlabel("Ann√©e")
#    plt.ylabel("Emissions (unit√©s)")
#    plt.title("√âmissions de CO¬≤ par secteur (1950-2100)", fontsize=16)
#    plt.legend(loc='upper left')
#    plt.grid(True)

 #   st.pyplot(plt)

    st.markdown(
        """
        <div style="text-align: justify;">
            <br><br>
            3- Le site <a href="https://www.cea.fr/presse/Pages/actualites-communiques/environnement/bilan-mondial-methane-record-emission.aspx#:~:text=%E2%80%8BLe%20bilan%20mondial%20de,des%20%C3%A9missions%20mondiales%20de%20m%C3%A9thane." style="color: blue;">statista</a> pr√©cise que les activit√©s humaines ont √©mis un record de 400 millions de tonnes m√©triques de m√©thane en 2020.
            Or le m√©thane (CH4) √† un PRG (potentiel de r√©chauffement global) 85 fois sup√©rieur au CO¬≤ √† 20 ans, qui diminue √† 30 fois au bout de 100 ans selon la formule PRG(t) = 84.e^(-0.05776t), t d√©signe le temps.
            Pour information, ce m√©thane provient de l'agriculture, l'√©levage, la gestion des d√©chets, l'industrie √©nerg√©tique (fuites lors d'extractions de p√©trole et charbon) et la combustion de la biomasse.
            <br><br>
            La courbe ci-dessous donne un aper√ßu du stocks de m√©thane en √©quivalent CO¬≤ dans l'atmosph√®re en fonction du calcul de son PRG, pour une constante annuelle de 400 millions de tonnes m√©triques.
            On observe qu'au bout de 15 ans, ont √©t√© ajout√©es 350 gigatonnes d'√©quivalent CO¬≤ dans l'atmosph√®re.
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )

    # D√©finition des param√®tres
    PRG_initial = 84
    lambda_decay = 0.05776
    emissions_per_year = 0.400  # √©missions en millions de tonnes de m√©thane par an
    years = np.arange(0, 76)  # simulation sur 75 ans

    # Calcul des PRG pour chaque ann√©e
    PRG_values = PRG_initial * np.exp(-lambda_decay * years)
    annual_emissions_CO2eq = emissions_per_year * PRG_values  # calcul des √©missions annuelles en CO2 √©quivalent
    cumulative_emissions_CO2eq = np.cumsum(annual_emissions_CO2eq)  # calcul cumulatif

    # Cr√©ation du DataFrame
    df_75_years = pd.DataFrame({
        'Ann√©e': years,
        '√âmissions CH4 (millions de tonnes)': emissions_per_year,
        'PRG annuel √©quivalent CO2 (millions de tonnes)': annual_emissions_CO2eq,
        'Cumul CO2 √©quivalent (millions de tonnes)': cumulative_emissions_CO2eq
    })

    # Cr√©ation de l'histogramme et de la courbe de la colonne cumul√©e
    plt.figure(figsize=(14, 7))
    plt.bar(df_75_years['Ann√©e'], df_75_years['Cumul CO2 √©quivalent (millions de tonnes)'], color='lightblue', label='Cumul CO2 √©quivalent')
    plt.plot(df_75_years['Ann√©e'], df_75_years['Cumul CO2 √©quivalent (millions de tonnes)'], color='blue', marker='o', label='Courbe Cumul CO2 √©quivalent')

    plt.title('Histogramme et courbe du cumul CO¬≤ √©quivalent sur 75 ans', fontsize=16)
    plt.xlabel('Ann√©e')
    plt.ylabel('Cumul CO2 √©quivalent (Gigatonnes)', fontsize=16)
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.legend()

    st.pyplot(plt)

    print(df_75_years.head())


# PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8 *** PAGE 8  *** PAGE 8
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

elif page == pages[8]:

    st.write("## Conclusions")

    st.markdown(
        """
        <div style="text-align: justify;">
            <br><br>
            Cette analyse a permis de mettre en pratique des techniques avanc√©es de data analyse appliqu√©es au domaine complexe et essentiel qu'est le r√©chauffement climatique. En explorant des jeux de donn√©es vari√©s, allant des temp√©ratures globales aux √©missions de gaz √† effet de serre et √† la croissance √©conomique, nous avons pu comprendre l'interd√©pendance entre ces facteurs. L'apprentissage de la data analyse a √©t√© au c≈ìur de la d√©marche, int√©grant des √©tapes de pr√©paration de donn√©es, de visualisation et de mod√©lisation pour extraire des informations significatives.<br><br>
            Les comp√©tences acquises en manipulation de donn√©es, en cr√©ation de visualisations pertinentes et en application de mod√®les de r√©gression ont permis de r√©v√©ler des corr√©lations importantes, telles que le lien entre le PIB mondial, la croissance de la population, et l'augmentation des temp√©ratures. L'utilisation de m√©triques de performance et de l'√©valuation des mod√®les a renforc√© la capacit√© √† valider des hypoth√®ses sur la base de donn√©es r√©elles.<br><br>
            Cette application pratique a √©galement mis en √©vidence les limites des pr√©dictions, rappelant que l'analyse des donn√©es historiques, bien qu'informative, doit √™tre compl√©t√©e par une compr√©hension approfondie des facteurs ext√©rieurs et des incertitudes futures. La mod√©lisation nous a montr√© que si la data analyse est puissante pour √©tablir des relations et pr√©voir des tendances, elle n√©cessite une interpr√©tation prudente dans le contexte de la complexit√© environnementale.<br><br>
            L'√©tude des variations de temp√©rature et de leurs causes a soulign√© l'importance d'une approche multidimensionnelle, m√™lant des donn√©es √©conomiques, d√©mographiques et climatiques. Elle a d√©montr√© comment l'apprentissage de la data analyse peut √™tre un outil indispensable pour sensibiliser, pr√©voir, et guider les politiques en mati√®re de lutte contre le changement climatique. En conclusion, cette exp√©rience souligne la pertinence de l'int√©gration des techniques de data analyse dans la recherche de solutions aux d√©fis environnementaux actuels et futurs.<br><br>
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )


# PAGE 9  ***  PAGE 9  *** PAGE 9 *** PAGE 9 *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9 *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 *** PAGE 9  *** PAGE 9 
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
